#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""dax_setup to setup variables for executables."""

import os
import sys
import stat
import glob
import socket
import getpass
import readline
import ConfigParser
from collections import OrderedDict


def complete(text, state):
    """Function to help tab completion path when using dax_setup."""
    return (glob.glob(text+'*')+[None])[state]


readline.set_completer_delims(' \t\n;')
readline.parse_and_bind("tab: complete")
readline.set_completer(complete)

BASH_PROFILE_XNAT = """
# Call for .xnat_profile files containing xnat logins:
if [ -f ~/.xnat_profile ]; then
    . ~/.xnat_profile
fi
"""

XNAT_PROFILE_TEMPLATE = """###### XNAT PROFILE FILE ######
# File running every time you open a new terminal (called by .bash_profile)
# created by dax_setup to setup your credentials as environment variables.
# Xnat host:
export XNAT_HOST="{host}"
# Xnat username
export XNAT_USER="{user}"
# Xnat password
export XNAT_PASS="{pwd}"
"""

ADMIN_DEFAULTS = OrderedDict([
                  ('user_home', os.path.expanduser('~')),
                  ('admin_email', ''),
                  ('smtp_host', ''),
                  ('smtp_from', ''),
                  ('smtp_pass', ''),
                  ('xsitype_include', 'proc:genProcData')])

CLUSTER_DEFAULTS = OrderedDict([
                    ('cmd_submit', 'qsub'),
                    ('prefix_jobid', ''),
                    ('suffix_jobid', ''),
                    ('cmd_count_nb_jobs', ''),
                    ('cmd_get_job_status', ''),
                    ('queue_status', ''),
                    ('running_status', ''),
                    ('complete_status', ''),
                    ('cmd_get_job_memory', ''),
                    ('cmd_get_job_walltime', ''),
                    ('cmd_get_job_node', ''),
                    ('job_extension_file', '.pbs'),
                    ('job_template', ''),
                    ('email_opts', 'a'),
                    ('gateway', socket.gethostname()),
                    ('root_job_dir', '/tmp'),
                    ('queue_limit', '400'),
                    ('results_dir', os.path.join(os.path.expanduser('~'),
                                                 'RESULTS_XNAT_SPIDER')),
                    ('max_age', '14')])

CODE_PATH_DEFAULTS = OrderedDict([
                      ('processors_path', ''),
                      ('spiders_path', ''),
                      ('modules_path', '')])

DAX_MANAGER_DEFAULTS = OrderedDict([
    ('api_url', ''),
    ('api_key_dax', ''),
    ('project', 'dax_project'),
    ('settingsfile', 'dax_settings_full_path'),
    ('masimatlab', 'dax_masimatlab'),
    ('tmp', 'dax_tmp_directory'),
    ('logsdir', 'dax_logs_path'),
    ('user', 'dax_cluster_user'),
    ('gateway', 'dax_gateway'),
    ('email', 'dax_cluster_email'),
    ('queue', 'dax_queue_limit'),
    ('priority', 'dax_proj_order'),
    ('email_opts', 'dax_job_email_options'),
    ('dax_build_start_date', 'dax_build_start_date'),
    ('dax_build_end_date', 'dax_build_end_date'),
    ('dax_build_pid', 'dax_build_pid'),
    ('dax_update_tasks_start_date', 'dax_update_tasks_start_date'),
    ('dax_update_tasks_end_date', 'dax_update_tasks_end_date'),
    ('dax_update_tasks_pid', 'dax_update_tasks_pid'),
    ('dax_launch_start_date', 'dax_launch_start_date'),
    ('dax_launch_end_date', 'dax_launch_end_date'),
    ('dax_launch_pid', 'dax_launch_pid'),
    ('max_age', 'dax_max_age'),
    ('admin_email', 'dax_email_address')])

DEFAULTS = {'admin': ADMIN_DEFAULTS,
            'cluster': CLUSTER_DEFAULTS,
            'code_path': CODE_PATH_DEFAULTS,
            'dax_manager': DAX_MANAGER_DEFAULTS}

INI_HEADER = """;dax_settings.ini contains all the variables to set dax on your system.
;It contains 4 sections define by [].

;The first one is [admin] defining the High level admin information.
; E.g. email address. xsitype_include needs to define the datatypes for DAX
; (Default: proc:genProcData).

;The second is [cluster] for deep information about the cluster.
; This should include commands that are grid-specific to get job id,
; walltime usage etc. Additionally, there are several templates that
; needed to be specified. See readthedocs for a description.

;The third one is [code_path] for Python script extension information.
; To import in dax all the spiders, processors and modules from those folders.
; You don't have to set a path if you don't want to give those paths.

;The fourth and last one is [dax_manager] that defines the REDCap
; infrastructure (options). Dax_manager uses REDCap to automatically generate
; settings for project. This section will help you set the API for your redcap
; project and all the variable on REDCap. If you don't know anything about it
; Leave all attributes to defaults value.

"""

# Sentence to write when message prompt for user
OPTIONS_DESCRIPTION = {
           'user_home': {'msg': 'Please enter your home directory: ',
                         'is_path': True},
           'admin_email': {'msg': 'Please enter email address for admin. \
All emails will get sent here: ', 'is_path': False},
           'smtp_from': {'msg': 'Please enter an email address where emails \
should be sent from: ', 'is_path': False},
           'smtp_host': {'msg': 'Please enter the SMTP host associated to your \
email address: ', 'is_path': False},
           'smtp_pass': {'msg': 'Please enter the password associated to your \
email address: ', 'is_path': False, 'confidential': True},
           'xsitype_include': {'msg': 'Please enter the xsitypes you would like DAX \
to access in your XNAT instance: ', 'is_path': False},
           'cmd_submit': {'msg': 'What command is used to submit your batch file? \
[e.g., qsub, sbatch]: ', 'is_path': False},
           'prefix_jobid': {'msg': 'Please enter a string to print before the \
job id after submission: ', 'is_path': False},
           'suffix_jobid': {'msg': 'Please enter a string to print after the \
job id after submission: ', 'is_path': False},
           'cmd_count_nb_jobs': {'msg': 'Please enter the full path to text file \
containing the command used to count the number of jobs in the queue: ',
                                 'is_path': True},
           'cmd_get_job_status': {'msg': 'Please enter the full path to text file \
containing the command used to check the running status of a job: ',
                                  'is_path': True},
           'queue_status': {'msg': 'Please enter the string the job scheduler would \
use to indicate that a job is "in the queue": ', 'is_path': False},
           'running_status': {'msg': 'Please enter the string the job scheduler would \
use to indicate that a job is "running": ', 'is_path': False},
           'complete_status': {'msg': 'Please enter the string the job scheduler would \
use to indicate that a job is "complete": ', 'is_path': False},
           'cmd_get_job_memory': {'msg': 'Please enter the full path to the text file \
containing the command used to see how much memory a job used: ',
                                  'is_path': True},
           'cmd_get_job_walltime': {'msg': 'Please enter the full path to the text file \
containing the command used to see how much walltime a job used: ',
                                    'is_path': True},
           'cmd_get_job_node': {'msg': 'Please enter the full path to the text file \
containing the command used to see which node a job used: ',
                                'is_path': True},
           'job_extension_file': {'msg': 'Please enter an extension for the job \
batch file: ', 'is_path': False},
           'job_template': {'msg': 'Please enter the full path to the text file \
containing the template used to generate the batch script: ',
                            'is_path': True},
           'email_opts': {'msg': 'Please provide the options for the email \
notification for a job as defined by your grid scheduler: ', 'is_path': False},
           'gateway': {'msg': 'Please enter the hostname of the server \
to run dax on: ', 'is_path': False},
           'root_job_dir': {'msg': 'Please enter where the data should be stored \
on the node: ', 'is_path': True},
           'queue_limit': {'msg': 'Please enter the maximum number of jobs \
that should run at once: ', 'is_path': False},
           'results_dir': {'msg': 'Please enter directory where data will get \
copied to for upload: ', 'is_path': True},
           'max_age': {'msg': 'Please enter max days before re-running dax_build \
on a session: ', 'is_path': False},
           'api_url': {'msg': 'Please enter your REDCap API URL: ',
                       'is_path': False},
           'api_key_dax': {'msg': 'Please enter the key to connect to the \
DAX Manager REDCap database: ', 'is_path': False},
           'spiders_path': {'msg': 'Please enter Folder path where you store \
your spiders: ', 'is_path': True},
           'processors_path': {'msg': 'Please enter Folder path where you store \
your processors: ', 'is_path': True},
           'modules_path': {'msg': 'Please enter Folder path where you store \
your modules: ', 'is_path': True},
           }

SGE_TEMPLATE = """#!/bin/bash
#$ -S /bin/sh
#$ -M ${job_email}
#$ -m ${job_email_options}
#$ -l h_rt=${job_walltime}
#$ -l tmem=${job_memory}M
#$ -l h_vmem=${job_memory}M
#$ -o ${job_output_file}
#$ -pe smp ${job_ppn}
#$ -j y
#$ -cwd
#$ -V
uname -a # outputs node info (name, date&time, type, OS, etc)
export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${job_ppn} #set the variable \
to use only the right amount of ppn
SCREEN=$$$$$$$$
SCREEN=${SCREEN:0:8}
echo 'Screen display number for xvfb-run' $SCREEN
xvfb-run --wait=5 \
-a -e /tmp/xvfb_$SCREEN.err -f /tmp/xvfb_$SCREEN.auth \
--server-num=$SCREEN \
--server-args="-screen 0 1920x1200x24 -ac +extension GLX" \
${job_cmds}\n"""

DEFAULT_SGE_DICT = {'cmd_submit': 'qsub',
                    'prefix_jobid': 'Your job ',
                    'suffix_jobid': '("',
                    'cmd_count_nb_jobs': 'expr `qstat -u $USER | wc -l` - 2\n',
                    'queue_status': 'qw',
                    'running_status': 'r',
                    'complete_status': '',
                    'cmd_get_job_memory': "echo ''\n",
                    'cmd_get_job_node': "echo ''\n",
                    'cmd_get_job_status': "qstat -u $USER | grep ${jobid} \
| awk {'print $5'}\n",
                    'cmd_get_job_walltime': "echo ''\n",
                    'job_extension_file': '.pbs',
                    'job_template': SGE_TEMPLATE,
                    'email_opts': 'a'}

SLURM_TEMPLATE = """#!/bin/bash
#SBATCH --mail-user=${job_email}
#SBATCH --mail-type=${job_email_options}
#SBATCH --nodes=1
#SBATCH --ntasks=${job_ppn}
#SBATCH --time=${job_walltime}
#SBATCH --mem=${job_memory}mb
#SBATCH -o ${job_output_file}

uname -a # outputs node info (name, date&time, type, OS, etc)
export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${job_ppn} #set the variable \
to use only the right amount of ppn
SCREEN=$$$$$$$$
SCREEN=${SCREEN:0:8}
echo 'Screen display number for xvfb-run' $SCREEN
xvfb-run --wait=5 \
-a -e /tmp/xvfb_$SCREEN.err -f /tmp/xvfb_$SCREEN.auth \
--server-num=$SCREEN \
--server-args="-screen 0 1920x1200x24 -ac +extension GLX" \
${job_cmds}\n"""

DEFAULT_SLURM_DICT = {'cmd_submit': 'sbatch',
                      'prefix_jobid': 'Submitted batch job ',
                      'suffix_jobid': '\n',
                      'cmd_count_nb_jobs': 'squeue -u masispider,vuiiscci \
--noheader | wc -l\n',
                      'queue_status': 'Q',
                      'running_status': 'R',
                      'complete_status': 'slurm_load_jobs error: Invalid job \
id specified\n',
                      'cmd_get_job_memory': "sacct -j ${jobid}.batch --format \
MaxRss --noheader | awk '{print $1+0}'\n",
                      'cmd_get_job_node': 'sacct -j ${jobid}.batch --format \
NodeList --noheader\n',
                      'cmd_get_job_status': 'slurm_load_jobs error: Invalid \
job id specified\n',
                      'cmd_get_job_walltime': 'sacct -j ${jobid}.batch \
--format CPUTime --noheader\n',
                      'job_extension_file': '.slurm',
                      'job_template': SLURM_TEMPLATE,
                      'email_opts': 'FAIL'}

MOAB_TEMPLATE = """#!/bin/bash
#PBS -M ${job_email}
#PBS -m ${job_email_options}
#PBS -l nodes=1:ppn=${job_ppn}
#PBS -l walltime=${job_walltime}
#PBS -l mem=${job_memory}mb
#PBS -o ${job_output_file}
#PBS -j y

uname -a # outputs node info (name, date&time, type, OS, etc)
export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${job_ppn} #set the variable \
to use only the right amount of ppn
SCREEN=$$$$$$$$
SCREEN=${SCREEN:0:8}
echo 'Screen display number for xvfb-run' $SCREEN
xvfb-run --wait=5 \
-a -e /tmp/xvfb_$SCREEN.err -f /tmp/xvfb_$SCREEN.auth \
--server-num=$SCREEN \
--server-args="-screen 0 1920x1200x24 -ac +extension GLX" \
${job_cmds}\n"""

DEFAULT_MOAB_DICT = {
  'cmd_submit': 'qsub',
  'prefix_jobid': '',
  'suffix_jobid': '.',
  'cmd_count_nb_jobs': 'qstat | grep $USER | wc -l\n',
  'queue_status': 'Q',
  'running_status': 'R',
  'complete_status': 'C',
  'cmd_get_job_memory': "rsh vmpsched 'tracejob -n ${numberofdays} ${jobid}' \
2> /dev/null | awk -v FS='(resources_used.mem=|kb)' '{print $2}' \
| sort -u | tail -1\n",
  'cmd_get_job_node': "echo ''\n",
  'cmd_get_job_status': "qstat -f ${jobid} | grep job_state \
| awk {'print $3'}\n",
  'cmd_get_job_walltime': "rsh vmpsched 'tracejob -n ${numberofdays} ${jobid}' \
2> /dev/null | awk -v FS='(resources_used.walltime=|\n)' '{print $2}' \
| sort -u | tail -1\n",
  'job_extension_file': '.pbs',
  'job_template': MOAB_TEMPLATE,
  'email_opts': 'a'}


class DAX_Setup_Handler(object):
    """DAX_Setup_Handler Class.

    Class to write the dax_settings.ini files required to run any
    dax executables.
    """

    def __init__(self):
        """Entry Point for DAX_Setup_Handler class."""
        # Set the settings_file
        self.settings_file = os.path.join(os.path.expanduser('~'),
                                          '.dax_settings.ini')

        # ConfigParser
        self.config_parser = ConfigParser.SafeConfigParser(allow_no_value=True)

        # Set the configParser from init file or default value
        if os.path.isfile(self.settings_file):
            try:
                self.config_parser.read(self.settings_file)
            except ConfigParser.MissingSectionHeaderError as MSHE:
                self._print_error_and_exit('Missing header bracket detected. \
Please check your ini file.\n', MSHE)
        else:  # set to default
            for section in sorted(DEFAULTS.keys()):
                self.config_parser.add_section(section)
                for option in DEFAULTS[section].iterkeys():
                    self.config_parser.set(section, option,
                                           DEFAULTS[section][option])

    def exists(self):
        """Check if ini file exists.

        :return: True if exists, False otherwise
        """
        return os.path.isfile(self.settings_file)

    def config(self):
        """Config the configParser for each section and ask user for value.

        Caller for all of the _get* methods.
        :return: True if using default settings, False otherwise
        """
        # For each section ask the user if he wants to edit it:
        print 'Starting to config the dax_settings.ini file:'
        for section in self.config_parser.sections():
            sys.stdout.write('  - Section: %s\n' % section)
            modify = prompt_user_yes_no('    Do you want to set/modify \
the section [%s] in the settings file?' % section)
            if modify:
                self.config_section(section)

    def config_section(self, section):
        """Configure the section.

        :param section: name of the section
        :return: None
        """
        msg = "Do you want to use specific templates settings from DAX?"
        if section == 'cluster' and prompt_user_yes_no(msg):
            self._set_cluster_default()
        else:
            for option in self.config_parser.options(section):
                value = self._prompt(section, option)
                self.config_parser.set(section, option, value)

    def write(self):
        """Write the all of the config options to the ~/.dax_settings.ini file.

        :return: None
        """
        with open(self.settings_file, 'w+') as ini_f:
            ini_f.write(INI_HEADER)
            self.config_parser.write(ini_f)

    def _prompt(self, section, option):
        """Method to prompt a user for an input for the option in the template.

        :param option: option name
        :return: String of the input
        """
        if option in OPTIONS_DESCRIPTION.keys():
            if 'confidential' in OPTIONS_DESCRIPTION[option].keys():
                msg = OPTIONS_DESCRIPTION[option]['msg']
                stdin = getpass.getpass(prompt=msg)
            else:
                stdin = raw_input(OPTIONS_DESCRIPTION[option]['msg'])
            if OPTIONS_DESCRIPTION[option]['is_path'] and stdin:
                if stdin.startswith('~/'):
                    stdin = os.path.join(os.path.expanduser('~'), stdin[2:])
                else:
                    stdin = os.path.abspath(stdin)
                if not os.path.exists(stdin):
                    print "Path <%s> does not exists." % stdin
                    stdin = self._prompt(section, option)
        else:
            stdin = raw_input('Please enter %s: ' % option)
        if not stdin:
            stdin = DEFAULTS[section][option]

        return stdin

    def _set_cluster_default(self, ctype=False):
        """Use the default cluster settings from the cluster type selected.

        :param ctype: True if set to default
        :return: None
        """
        cluster_type = '0'
        while cluster_type not in ['1', '2', '3']:
            cluster_type = raw_input("Which cluster are you using? \
[1.SGE 2.SLURM 3.MOAB] ")
        sys.stdout.write('Warning: You can edit the cluster templates files at any \
time in ~/.dax_templates/\n')

        for option in ['gateway', 'root_job_dir', 'queue_limit', 'results_dir',
                       'max_age']:
            value = self._prompt('cluster', option)
            self.config_parser.set('cluster', option, value)

        if cluster_type == '1':
            cluster_dict = DEFAULT_SGE_DICT
        elif cluster_type == '2':
            cluster_dict = DEFAULT_SLURM_DICT
        else:
            cluster_dict = DEFAULT_MOAB_DICT

        # Copy the files from the template:
        templates_path = os.path.join(self.config_parser.get('admin',
                                                             'user_home'),
                                      '.dax_templates')
        if not os.path.exists(templates_path):
            os.makedirs(templates_path)
        for option, value in cluster_dict.items():
            if option in OPTIONS_DESCRIPTION and \
               OPTIONS_DESCRIPTION[option]['is_path']:
                file_path = os.path.join(templates_path, option+'.txt')
                with open(file_path, 'w') as fid:
                    fid.writelines(value)
                self.config_parser.set('cluster', option, file_path)
            else:
                self.config_parser.set('cluster', option, value)


def set_xnat_credentials():
    """Ask User for xnat credentials and store it locally.

    :return: None
    """
    xnat_profile = os.path.join(os.path.expanduser('~'), '.xnat_profile')
    if not os.path.isfile(xnat_profile) \
       and not os.environ['XNAT_HOST'] \
       and not os.environ['XNAT_USER'] \
       and not os.environ['XNAT_PASS']:
        print 'Setting XNAT credentials:'
        host = raw_input("Please enter your XNAT host: ")
        user = raw_input("Please enter your XNAT username: ")
        pwd = getpass.getpass(prompt='Please enter your XNAT password: ')
        with open(xnat_profile, 'w') as fid:
            fid.writelines(XNAT_PROFILE_TEMPLATE.format(host=host,
                                                        user=user,
                                                        pwd=pwd))
        # Changing mod of the file:
        os.chmod(xnat_profile, stat.S_IRWXU)
        print 'Please run the ~/.xnat_profile to set up the credentials.'
        # add .xnat_profile to your profile file:
        init_profile()


def init_profile():
    """Function to init your profile file to call xnat_profile.

    :param profile_path: path to your profile file
    :return: None
    """
    # link the file in the bashrc or profile
    profile = os.path.join(os.path.expanduser('~'), '.bash_profile')

    if os.path.exists(os.path.join(os.path.expanduser('~'), '.bash_profile')):
        profile = os.path.join(os.path.expanduser('~'), '.bash_profile')
    elif os.path.exists(os.path.join(os.path.expanduser('~'), '.bashrc')):
        profile = os.path.join(os.path.expanduser('~'), '.bashrc')
    elif os.path.exists(os.path.join(os.path.expanduser('~'), '.profile')):
        profile = os.path.join(os.path.expanduser('~'), '.profile')
    else:
        raise Exception("could not find your profile file. Please set up XNAT_HOST, \
XNAT_USER, and XNAT_PASS environment variables manually and rerun dax_setup.")
    # Add the line to the profile
    if 'source ~/.xnat_profile' not in open(profile).read():
        with open(profile, "a") as f_profile:
            f_profile.write(BASH_PROFILE_XNAT)


def prompt_user_yes_no(question):
    """Prompt the user for a question with answer Y/N.

    :return: True if yes, False if no, ask again if any other answer
    """
    value = ''
    while value.lower() not in ['yes', 'no', 'n', 'y']:
        value = raw_input("%s [yes/no] " % question)
    if value.lower() in ['yes', 'y']:
        return True
    else:
        return False

if __name__ == '__main__':
    print '########## DAX_SETUP ##########'
    print 'Script to setup the ~/.dax_settings.ini files \
for your dax installation.\n'
    # Set xnat credentials if needed
    set_xnat_credentials()

    # Set the settings for dax
    DSH = DAX_Setup_Handler()

    if DSH.exists():
        sys.stdout.write('Settings file ~/.dax_settings.ini found.\n')
        if not prompt_user_yes_no('Do you want to edit it?'):
            print '########## END ##########'
            sys.exit()

    DSH.config()
    DSH.write()

    print '\n0 error(s) -- dax_setup done.'
    print '########## END ##########'
