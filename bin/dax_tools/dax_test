#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Executable to test the python files you created for DAX:
    --processor path to the file for the processor
    --module path to the file for the module
    --settings path to the settings file
"""

import os
import dax
import imp
import glob
import time
import shutil
import random
import getpass
import platform
import subprocess as sb

DAX_TEST_DIR = os.path.join(os.path.expanduser("~"), '.dax_test')

TD_INFO = """======================================================================
DAX TEST
----------------------------------------------------------------------
Platform  : {platform}
Python v. : {version}
Dax v.    : {dax_version}
XNAT host : {host}
Username  : {user}
======================================================================
Running test for dax files generated by user ...
----------------------------------------------------------------------
"""

TD_END = """
----------------------------------------------------------------------
ran {nb_test} test(s) in {time}s

{state}
"""

SETTINGS_DISPLAY = """  Xnat host: {host}
  Xnat user: {user}
  Projects Priority: {priority}
  Projects Processors: {pp}
  Projects Modules: {pm}
  Root Job Dir: {jobdir}
  Job email: {email}
  Email options: {email_opts}
  Queue limit: {limit}
  Maximum age session: {age}
"""

PROC_DISPLAY = """    *NAME: {name}
      SPIDER:
        Path: {spath}
        version: {version}
      XNAT:
        Host: {host}
        type: {xsitype}
        level: {level}
      CLUSTER:
        memory: {memory}
        walltime: {walltime}
        Number of cores: {ppn}
      OTHER ARGUMENTS:
{other}
"""
PROC_DEF_ARGS = ['name', 'xnat_host', 'xsitype', 'memreq_mb', 'walltime_str',
                 'ppn', 'spider_path', 'version']

MOD_DISPLAY = """    *NAME: {name}
      TEMP DIRECTORY: {temp_dir}
      REPORT EMAIL: {email}
      XNAT:
        level: {level}
      OTHER ARGUMENTS:
{other}
"""
MOD_DEF_ARGS = ['name', 'xnat_host', 'directory', 'email']

DEL_DW = "----------------------------------------------------------------------"
DEL_UP = "======================================================================"

DESCRIPTION = """What is the script doing :
   * Test the dax files that the user created (processor.py/module.py/settings.py).

You can find information on github on how to write those files.
Three executables are available to generate the squeleton for the files:
 - GenerateModuleTemplate
 - GenerateProcessorTemplate
 - GenerateSettingsTemplate

You will need to name the object you want to test: 'test_obj' (see below).
Your module/processsor or launcher (for settings) object should be name 'test_obj'.

E.G for module:
       from Module_Set_Scan_Type import Module_Set_Scan_Type
       test_obj = Module_Set_Scan_Type()

Examples:
  Run for module:
   * dax_test -p PROJECT --nb_sess 5 --file test_module.py
  Run for processor for PROJECT on 2 sessions Sess1 and Sess2:
   * dax_test -p PROJECT --nb_sess 5 --file test_processor.py --sessions Sess1,Sess2
  Run for settings without seing dax outputs and keep the log:
   * dax_test -p PROJECT --nb_sess 5 --file test_settings.py --hide --nodel
"""

########################

# Class for testing purpose
class test_results:
    '''
    Class to keep tract of test results (number of test, fail, error, time)

    :param tobj: object to be tested by dax_test (processor/module/launcher)
    '''
    def __init__(self, tobj=None):
        # Default variables:
        self.nb_test = 0
        self.error = 0
        self.fail = 0
        self.warning = 0
        self.time = time.time()
        # User variable:
        self.tobj = tobj
        self.should_run = True
        self.launch_obj = None

    def set_tobj(self, tobj):
        """
        Setter for the test object

        :return: None
        """
        self.tobj = tobj

    def run_test(self):
        """
        Run test

        :return: None
        """
        # Set the launcher_obj:
        if isinstance(self.tobj, dax.processors.Processor):
            # Set the cobj:
            sessions = get_sessions_for_project(ARGS.project)
            proj_proc = {ARGS.project: [self.tobj]}
            proj_mod = {ARGS.project: []}
            self.launch_obj = dax.launcher.Launcher(proj_proc, proj_mod, priority_project=None,
                                                    xnat_user=USER, xnat_pass=PWD, xnat_host=HOST)
        elif isinstance(self.tobj, dax.modules.Module):
            # Set the cobj:
            proj_proc = {ARGS.project: []}
            proj_mod = {ARGS.project: [self.tobj]}
            self.launch_obj = dax.launcher.Launcher(proj_proc, proj_mod, priority_project=None,
                                                    xnat_user=USER, xnat_pass=PWD, xnat_host=HOST)
        elif isinstance(self.tobj, dax.launcher.Launcher):
            self.launch_obj = self.tobj
        else:
            print '[ERROR] test_obj in test can not be identified to a dax objects.'
            self.inc_error()
            self.should_run = False

        if self.should_run:
            if isinstance(self.tobj, dax.processors.Processor):
                self.run_test_processor(ARGS.project, sessions)
            elif isinstance(test_obj, dax.modules.Module):
                self.run_test_module()
            elif isinstance(test_obj, dax.launcher.Launcher):
                unique_list = set(self.tobj.project_process_dict.keys()+self.tobj.project_modules_dict.keys())
                project_list = self.tobj.get_project_list(list(unique_list))
                for project in project_list:
                    sessions = randomly_get_sessions(project)
                    self.run_test_settings(project, sessions)

    def inc_warning(self):
        """
        Increase warning counter

        :return: None
        """
        self.warning += 1

    def inc_error(self):
        """
        Increase error counter

        :return: None
        """
        self.error += 1

    def inc_fail(self):
        """
        Increase fail counter

        :return: None
        """
        self.fail += 1

    def inc_test(self):
        """
        Increase test counter

        :return: None
        """
        self.nb_test += 1

    def get_time(self):
        """
        Return the time since the object was created

        :return: time in seconds
        """
        end = time.time()
        return end - self.time

    def get_test_state(self):
        """
        Return state of the test

        :return: None
        """
        if self.error > 0 or self.fail > 0:
            return 'FAILED (failures=%s, errors=%s, warnings=%s)' % (str(self.fail), str(self.error), str(self.warning))
        else:
            state = 'OK'
            warning = '  (warnings=%s)' % str(self.warning) if self.warning !=0 else ''
            return state+warning

    def get_number(self):
        """
        Return Number of tests ran

        :return: int
        """
        return self.nb_test

    def test_has_inputs(self, project, sessions):
        """
        Method to test the has_inputs function

        :param project: XNAT project
        :param sessions: XNAT sessions
        :return: True if SUCCEEDED, False otherwise
        """
        # Test has_inputs for each session
        print_sub_test('test_has_inputs')

        # Loop through the sessions
        for cobj in set_proc_cobjs_list(self.tobj, project, sessions):
            cinfo = cobj.info()
            try:
                if isinstance(cobj, dax.XnatUtils.CachedImageScan):
                    print "Processor.has_inputs(cobj) running on %s - %s - %s ..." % (project, cinfo['session_label'], cinfo['ID'])
                else:
                    print "Processor.has_inputs(cobj) running on %s - %s ..." % (project, cinfo['session_label'])
                state, qcstatus = self.tobj.has_inputs(cobj)
                self.inc_test()
                qcstatus = qcstatus if qcstatus else dax.task.JOB_PENDING
                if state == 0:
                    state = dax.task.NEED_INPUTS
                elif state == 1:
                    state = dax.task.NEED_TO_RUN
                elif state == -1:
                    state = dax.task.NO_DATA
                else:
                    print "[FAIL] State return by Processor.has_inputs() unknown (-1/0/1): %s" % state
                    self.inc_fail()
                    return False
                print "Outputs: state = %s and qcstatus = %s" % (state, qcstatus)
            except Exception as e:
                print '[ERROR]', e
                self.inc_error()
                return False

        return True

    def test_dax_build(self, project, sessions):
        """
        Method to test a processor through dax

        :param project: XNAT project
        :param sessions: XNAT sessions
        :return: None
        """
        print_sub_test('test_dax_build')
        try:
            self.inc_test()
            print "dax_build on %s - %s ..." % (project, ','.join(sessions))
            self.launch_obj.build('dax_test', project, ','.join(sessions))
            has_assessors = self.check_sessions(project, sessions)
            if has_assessors:
                print "\nbuild SUCCEEDED"
            else:
                self.inc_fail()
                print "\nbuild FAILED"
        except Exception as e:
            print '[ERROR]', e
            self.inc_error()

    def check_sessions(self, project, sessions):
        """
        Method to test a processor through dax

        :param project: XNAT project
        :param sessions: XNAT sessions
        :return: True if the assessors have been created, False otherwise
        """
        if isinstance(self.tobj, dax.processors.Processor):
            list_proc_obj = [self.tobj]
        elif isinstance(self.tobj, dax.modules.Module):
            return True
        else:
            list_proc_obj = self.tobj.project_process_dict[project]
        for proc_obj in list_proc_obj:
            for cobj in set_proc_cobjs_list(proc_obj, project, sessions):
                cinfo = cobj.info()
                if isinstance(cobj, dax.XnatUtils.CachedImageScan):
                    assessor_label = "%s-x-%s-x-%s-x-%s-x-%s" % (project, cinfo['subject_label'],
                                                                 cinfo['session_label'], cinfo['ID'],
                                                                 proc_obj.name)
                else:
                    assessor_label = "%s-x-%s-x-%s-x-%s" % (project, cinfo['subject_label'],
                                                            cinfo['session_label'], proc_obj.name)
                assessor_obj = dax.XnatUtils.select_assessor(XNAT, assessor_label)
                if not assessor_obj.exists():
                    print '[FAIL] Assessor %s did not get created on XNAT.' % assessor_label
                    return False
                else:
                    mget = assessor_obj.attrs.mget([dax.XnatUtils.DEFAULT_DATATYPE+'/proctype',
                                                    dax.XnatUtils.DEFAULT_DATATYPE+'/procstatus',
                                                    dax.XnatUtils.DEFAULT_DATATYPE+'/validation/status',
                                                    dax.XnatUtils.DEFAULT_DATATYPE+'/date'])
                    print "Assessor %s: \n - proctype: %s\n - procstatus: %s\n - qcstatus: %s\n - date: %s" % (assessor_label,
                                                                                                               mget[0],
                                                                                                               mget[1],
                                                                                                               mget[2],
                                                                                                               mget[3])
        return True

    def test_dax_launch(self, project, sessions):
        """
        Method to test a processor through dax

        :param project: XNAT project
        :param sessions: XNAT sessions
        :return: None
        """
        print_sub_test('test_dax_launch')
        try:
            self.inc_test()
            print "Launching tasks for %s - %s with writeonly ..." % (project, ','.join(sessions))
            tasks_list = self.launch_obj.get_tasks(XNAT, self.all_tasks, [project], ','.join(sessions))
            for cur_task in tasks_list:
                cur_task.launch(self.launch_obj.root_job_dir, self.launch_obj.job_email,
                                self.launch_obj.job_email_options, self.launch_obj.xnat_host,
                                True, pbsdir=DAX_TEST_DIR)
            results = display_pbs_file(project, sessions)
            if results:
                print "launch SUCCEEDED"
            else:
                print "launch FAILED"
        except Exception as e:
            print '[ERROR]', e
            self.inc_error()

    @staticmethod
    def all_tasks(_):
        """
        Check if a task is launchable

        :param assr_info: dictionary containing procstatus for the assessor (not used)
        :return: True to take all assessor
        """
        return True

    def test_dax(self, project, sessions):
        """
        General Method to test all executables for dax

        :param project: XNAT project
        :param sessions: XNAT sessions
        :return: None
        """
        self.test_dax_build(project, sessions)
        if not isinstance(self.tobj, dax.modules.Module):
            self.test_dax_launch(project, sessions)

    def test_pre_run(self):
        """
        Method to test pre run function for a module through dax

        :param project: XNAT Project
        :param sessions: XNAT Sessions
        :return: None
        """
        print_sub_test('test_pre_run')

        try:
            self.inc_test()
            print "Pre run ..."
            self.tobj.prerun()
            return True
        except Exception as e:
            print '[ERROR]', e
            self.inc_error()
            return False

    def test_run(self):
        """
        Method to test run function for a module

        :param project: XNAT Project
        :param sessions: XNAT Sessions
        :return: None
        """
        print_sub_test('test_run')

        sessions = randomly_get_sessions(ARGS.project)
        cobj_list = set_mod_cobjs_list(self.tobj, ARGS.project, sessions)
        try:
            self.inc_test()
            print "Run on sessions: %s ..." % ','.join(sessions)
            for cobj in cobj_list:
                cinfo = cobj.info()
                self.tobj.run(cinfo, dax.XnatUtils.get_full_object(XNAT, cinfo))
                if isinstance(self.tobj, dax.modules.SessionModule):
                    result = self.tobj.has_flag_resource(cobj, self.tobj.mod_name)
                    if not result:
                        print "[FAIL] Session Module didn't create the flagfile for %s." % (cobj.info()['label'])

            return True
        except Exception as e:
            print '[ERROR]', e
            self.inc_error()
            return False


    def test_after_run(self):
        """
        Method to test after run function for a module

        :param project: XNAT Project
        :param sessions: XNAT Sessions
        :return: None
        """
        print_sub_test('test_after_run')

        try:
            self.inc_test()
            print "After run ..."
            self.tobj.afterrun(XNAT, ARGS.project)
            return True
        except Exception as e:
            print '[ERROR]', e
            self.inc_error()
            return False

    def run_test_processor(self, project, sessions):
        """
        Method to test a processor through dax

        :param project: XNAT Project
        :param sessions: XNAT Sessions
        :return: None
        """
        # display
        print_new_test(self.tobj.name)

        # Test has_inputs:
        result = self.test_has_inputs(project, sessions)
        if result:
            print "\nhas_inputs SUCCEEDED"
        else:
            print "\nhas_inputs FAILED"

        # Test dax functionalities:
        self.test_dax(project, sessions)

    def run_test_module(self):
        """
        Method to test a module through dax

        :param mod_obj: module object to run with dax
        :return: Number of test that ran, fail, error
        """
        # display
        print_new_test(self.tobj.mod_name)

        # Test has_inputs:
        sessions = randomly_get_sessions(ARGS.project)
        if self.test_pre_run():
            print "prerun() SUCCEEDED"
        else:
            print "prerun() FAILED"

        if self.test_run():
            print "run() SUCCEEDED"
        else:
            print "run() FAILED"

        if self.test_after_run():
            print "afterrun() SUCCEEDED"
        else:
            print "afterrun() FAILED"

        # Test dax functionalities:
        self.test_dax(ARGS.project, sessions)

    def run_test_settings(self, project, sessions):
        """
        Method to test a settings file through dax

        :param project: XNAT Project
        :param sessions: XNAT Sessions
        :return: Number of test that ran, fail, error
        """
        # print info settings:
        display_settings()

        # Test dax functionalities:
        self.test_dax(project, sessions)

############# END TEST CLASS ###############
def display_pbs_file(project, sessions):
    """
    Method to display one of the pbs file created

    :param project: XNAT project
    :param sessions: XNAT sessions
    :return: True if PBS created, False if not.
    """
    pbs_files = list()
    # get a PBS file created:
    for sess in sessions:
        pbs_files.extend(glob.glob(os.path.join(DAX_TEST_DIR, '%s-x-*-x-%s-x-*.pbs' % (project, sess))))
    # if empty raise Error
    if len(pbs_files) == 0:
        print '[ERROR] No PBS file generated in %s by dax_launch' % DAX_TEST_DIR
        TT_RESULTS.inc_error()
        return False
    else:
        print 'PBS Example:\n'
        print open(pbs_files[0], "rb").read()
        return True

def display_settings():
    """
    Method to display from the settings:
        - projects
        - processors and the default values
        - modules and the default values
        - launcher and the default values

    :return: None
    """
    proj_list = list()
    print 'Settings arguments:'
    print_settings(TT_RESULTS.launch_obj.__dict__)
    proj_mods = TT_RESULTS.launch_obj.project_modules_dict
    proj_procs = TT_RESULTS.launch_obj.project_process_dict
    proj_list.extend(proj_mods.keys())
    proj_list.extend(proj_procs.keys())
    print '\nList of XNAT projects : %s' % ','.join(list(set(proj_list)))

    for project in list(set(proj_list)):
        print ' - Project %s:' % project
        print '  + Module(s) arguments:'
        if project in proj_mods.keys() and len(proj_mods[project]) > 0:
            for module in proj_mods[project]:
                print_module(module)
        else:
            print '    No module set for the project.'
        print '\n  + Processor(s) arguments:'
        if project in proj_procs.keys() and len(proj_procs[project]) > 0:
            for processor in proj_procs[project]:
                print_processor(processor)
        else:
            print '    No processor set for the project.'

def print_settings(settings_dict):
    """
    Display the settings informations

    :param settings_dict: dictionary containing the variables
      for the dax.launcher.Launcher object
    :return: None
    """
    print SETTINGS_DISPLAY.format(host=settings_dict['xnat_host'],
                                  user=settings_dict['xnat_user'],
                                  priority=settings_dict['priority_project'],
                                  pp=settings_dict['project_process_dict'],
                                  pm=settings_dict['project_modules_dict'],
                                  jobdir=settings_dict['root_job_dir'],
                                  email=settings_dict['job_email'],
                                  email_opts=settings_dict['job_email_options'],
                                  limit=settings_dict['queue_limit'],
                                  age=settings_dict['max_age'])

def print_module(mod_obj):
    """
    Display the module informations

    :param mod_dict: dax.module.Module object
    :return: None
    """
    level = 'Scan' if isinstance(mod_obj, dax.modules.ScanModule) else 'Session'
    mod_dict = mod_obj.__dict__
    other_args = ''
    for key, arg in mod_dict.items():
        if key not in MOD_DEF_ARGS:
            other_args += "       %s: %s\n" % (key, str(arg).strip())
    print MOD_DISPLAY.format(name=mod_dict['mod_name'],
                             temp_dir=mod_dict['directory'],
                             email=mod_dict['email'],
                             level=level,
                             other=other_args)

def print_processor(proc_obj):
    """
    Display the processor informations

    :param proc_obj: dax.processor.Processor object
    :return: None
    """
    level = 'Scan' if isinstance(proc_obj, dax.processors.ScanProcessor) else 'Session'
    proc_dict = proc_obj.__dict__
    other_args = ''
    host = proc_dict['xnat_host'] if proc_dict['xnat_host'] else 'using default XNAT_HOST'
    for key, arg in proc_dict.items():
        if key not in PROC_DEF_ARGS:
            other_args += "       %s: %s\n" % (key, str(arg).strip())
    print PROC_DISPLAY.format(name=proc_dict['name'],
                              spath=proc_dict['spider_path'],
                              version=proc_dict['version'],
                              host=host,
                              xsitype=proc_dict['xsitype'],
                              level=level,
                              memory=proc_dict['memreq_mb'],
                              walltime=proc_dict['walltime_str'],
                              ppn=proc_dict['ppn'],
                              other=other_args)

def randomly_get_sessions(project):
    """
    Retrieve nb_sess sessions label randomly from the test project on XNAT

    :param project: XNAT project
    :return: list of sessions label
    """
    sessions = list()
    list_sess = dax.XnatUtils.list_sessions(XNAT, project)
    if len(list_sess) < int(ARGS.nb_sess):
        sessions = [sess['label'] for sess in list_sess]
    else:
        for _ in range(int(ARGS.nb_sess)):
            session_added = False
            while not session_added:
                random_index = random.randint(0, len(list_sess)-1)
                if list_sess[random_index]['label'] not in sessions:
                    sessions.append(list_sess[random_index]['label'])
                    session_added = True

    return sessions

def is_python_file(filepath):
    """
    Check if a file is a python file using bash command file

    :param filepath: path to the file to test
    :return: True if it's a python file, False otherwise
    """
    file_call = '''file {fpath}'''.format(fpath=filepath)
    output = sb.check_output(file_call.split())
    if 'python' in output.lower():
        return True

    return False

def file_check(filepath):
    """
    Check if a file exists and if it's a python file

    :param filepath: path to the file to test
    :return: True the file pass the test, False otherwise
    """
    try:
        open(filepath, "r")
        if os.path.splitext(filepath)[1][1:].strip().lower() == 'py'\
           or is_python_file(filepath):
            return True
        else:
            print '[ERROR] %s not a regular python file (.py)' % filepath
            return False
    except IOError as e:
        print '[ERROR]',e
        return False

def print_new_test(name):
    """
    Print separation for new test

    :param name: name for the test
    :return: None
    """
    print DEL_UP
    print 'Test -- %s ...' % (name)

def print_sub_test(name):
    """
    Print separation for new test

    :param name: name for the method
    :return: None
    """
    print '\n'+DEL_DW
    print ' + Testing method %s \n' % (name)

def get_sessions_for_project(project):
    """
    Return list of XNAT sessions (between 1-5) to test the object on them

    :param project: XNAT project
    :return: list of sessions label
    """
    # Set Sessions: If No sessions specified, select 5 random sessions for testing:
    if ARGS.sessions:
        sessions = ARGS.sessions.split(',')
        if len(sessions) > 5:
            sessions = sessions[:5]
        elif len(sessions) <= 0:
            raise Exception('No sessions set for the test.')
        return sessions
    else:
        if ARGS.nb_sess > 5:
            ARGS.nb_sess = 5
        elif ARGS.nb_sess <= 0:
            raise Exception('--nb_sess set with an interger smaller than 1. Please use at least one.')
        return randomly_get_sessions(project)

def set_proc_cobjs_list(proc_obj, project, sessions):
    """
    Method to get the list of Cached Objects for the project/sessions for a processor

    :param proc_obj: processor object
    :param project: XNAT project
    :param sessions: XNAT sessions
    :return: None
    """
    co_list = list()
    sess_list = [sess for sess in dax.XnatUtils.list_sessions(XNAT, project) if sess['label'] in sessions]
    # Loop through the sessions
    for sess in sess_list:
        csess = dax.XnatUtils.CachedImageSession(XNAT, project, sess['subject_label'], sess['label'])
        if isinstance(proc_obj, dax.ScanProcessor):
            for cscan in csess.scans():
                if proc_obj.should_run(cscan.info()):
                    co_list.append(cscan)
        elif isinstance(proc_obj, dax.SessionProcessor):
            co_list.append(csess)

    if len(co_list) == 0:
        print "[WARNING] No scan found for the ScanProcessor"
        TT_RESULTS.inc_warning()
    return co_list

def set_mod_cobjs_list(mod_obj, project, sessions):
    """
    Method to get the list of Cached Objects for the project/sessions for a processor

    :param mod_obj: processor object
    :param project: XNAT project
    :param sessions: XNAT sessions
    :return: None
    """
    co_list = list()
    sess_list = [sess for sess in dax.XnatUtils.list_sessions(XNAT, project) if sess['label'] in sessions]
    # Loop through the sessions
    for sess in sess_list:
        csess = dax.XnatUtils.CachedImageSession(XNAT, project, sess['subject_label'], sess['label'])
        if isinstance(mod_obj, dax.ScanModule):
            for cscan in csess.scans():
                if mod_obj.needs_run(cscan, XNAT):
                    co_list.append(cscan)
        elif isinstance(mod_obj, dax.SessionModule):
            if mod_obj.needs_run(csess, XNAT):
                co_list.append(csess)

    if len(co_list) == 0:
        print "[WARNING] No object found for the Module."
        TT_RESULTS.inc_warning()
    return co_list

def parse_args():
    """
    Method to parse arguments base on ArgumentParser

    :return: parser object parsed
    """
    from argparse import ArgumentParser, RawTextHelpFormatter
    ap = ArgumentParser(prog='dax_test', description=DESCRIPTION, formatter_class=RawTextHelpFormatter)
    ap.add_argument('--host', dest='host', default=None, help='Host for XNAT. Default: using $XNAT_HOST.')
    ap.add_argument('-u', '--username', dest='username', default=None, help='Username for XNAT. Default: using $XNAT_USER.')
    ap.add_argument('-p', '--project', dest='project', help='Project ID from XNAT to use for testing.', required=True)
    ap.add_argument('-s', '--sessions', dest='sessions', help='list of sessions label from XNAT to test the dax files.', default=None)
    ap.add_argument('--nb_sess', dest='nb_sess', help='Number of sessions to test dax files on. Default: 2. Max:5.', default=2, type=int)
    ap.add_argument('--file', dest='test_file', help='Path to the test file written by the user containing the test_obj.', required=True)
    ap.add_argument('--nodel', dest='do_not_remove', help='Keep temp files generated by dax_setup (in ~/.dax_test).', action='store_false')
    ap.add_argument('--hide', dest='hide', help='Hide dax outputs in a logfile in ~/.dax_test/dax_test.log.', action='store_true')
    return ap.parse_args()

if __name__ == '__main__':
    ARGS = parse_args()
    NB_TEST = 0
    ERROR = 0

    #Make the temp dir:
    if not os.path.isdir(DAX_TEST_DIR):
        os.makedirs(DAX_TEST_DIR)

    # Set the log of any dax function to a temp file for user:
    if ARGS.hide:
        logfile = os.path.join(DAX_TEST_DIR, 'dax_test.log')
    else:
        logfile = None
    dax.log.setup_debug_logger('dax', logfile)

    # Get XNAT info:
    HOST = ARGS.host if ARGS.host else os.environ['XNAT_HOST']
    USER = ARGS.username if ARGS.username else os.environ['XNAT_USER']
    if ARGS.username:
        MSG = "Please provide the password for user <%s> on xnat(%s):" % (USER, HOST)
        PWD = getpass.getpass(prompt=MSG)
    else:
        PWD = None

    try:
        XNAT = dax.XnatUtils.get_interface(host=HOST, user=USER, pwd=PWD)

        # Test display info:
        TT_RESULTS = test_results()
        print TD_INFO.format(platform=platform.system(), version=platform.python_version(),
                             dax_version=dax.__version__, host=HOST, user=USER)

        # Test for Processor:
        if ARGS.test_file:
            is_good = file_check(os.path.abspath(ARGS.test_file))
            if not is_good:
                TT_RESULTS.inc_error()
            else:
                try:
                    settings = imp.load_source('settings', os.path.abspath(ARGS.test_file))
                    test_obj = settings.test_obj
                    TT_RESULTS.set_tobj(test_obj)
                    TT_RESULTS.run_test()
                except Exception as e:
                    print '[ERROR]',e
                    TT_RESULTS.inc_error()

        print TD_END.format(nb_test=TT_RESULTS.get_number(), time="%.3f" % TT_RESULTS.get_time(), state=TT_RESULTS.get_test_state())

    finally:
        XNAT.disconnect()
        if ARGS.do_not_remove:
            if 'OK' == TT_RESULTS.get_test_state()[:2]:
                shutil.rmtree(DAX_TEST_DIR)
