#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
from dax import spiders


SPIDER_TEMPLATE = '''# This file generated by GenerateAutoSpider
from dax import AutoSpider

name = '{name}'

version = '{version}'

extension = '{extension}'

inputs = {inputs}

outputs = {outputs}

code = r"""{code}"""

if __name__ == '__main__':
    spider = AutoSpider(
        name,
        inputs,
        outputs,
        code,
        datatype='{datatype}',
        version=version
    )

    spider.go()
'''


def parse_args():
    """
    Method to parse arguments base on ArgumentParser
    :return: parser object parsed
    """
    from argparse import ArgumentParser
    usage = "Generate your Spider .py following the dax template for spider"
    parser = ArgumentParser(prog='GenerateAutoSpider', description=usage)
    parser.add_argument('-n', dest='name', required=True,
                        help='Name for Spider. e.g. fMRIQA')
    parser.add_argument('-v', dest='version', required=True,
                        help='Spider version, format: X.Y.Z, e.g. 1.0.0')
    parser.add_argument('-i', dest='inputs_file', help='Path to inputs file',
                        required=True)
    parser.add_argument('-o', dest='outputs_file', help='Path to outputs file',
                        required=True)
    parser.add_argument('-c', dest='code_file', required=True,
                        help='Path to code template file')
    parser.add_argument('-d', dest='directory', default=None,
                        help="Directory where spider file will be written")
    parser.add_argument('-t', dest='type', default='session',
                        choices=['session', 'scan'],
                        help='Type of Spider: session, scan')
    return parser.parse_args()


if __name__ == '__main__':
    ARGS = parse_args()
    inputs_file = ARGS.inputs_file
    outputs_file = ARGS.outputs_file
    code_file = ARGS.code_file

    # TODO: error-checking on the files

    # Check spider name
    if ARGS.name.endswith('.py') or "spider" in ARGS.name.lower() or \
       not re.compile('^\w+$').match(ARGS.name):
        err = "Invalid spider name"
        raise ValueError(err)

    # Check version
    if not spiders.is_good_version(ARGS.version):
        err = "Invalid format for version. \
Must be X.Y.Z. See http://semver.org."
        raise ValueError(err)

    # Load Inputs
    inputs = spiders.load_inputs(inputs_file)
    inputs_str = '['
    for i in inputs:
        inputs_str += '\n    ("'
        inputs_str += '", "'.join(i)
        inputs_str += '"),'

    inputs_str = inputs_str[:-1]+']'

    # Load Outputs
    outputs = spiders.load_outputs(outputs_file)
    outputs_str = '['
    for i in outputs:
        outputs_str += '\n    ("'
        outputs_str += '", "'.join(i)
        outputs_str += '"),'

    outputs_str = outputs_str[:-1]+'\n]'

    # Load the code template
    extension = code_file.split('.')[-1]
    code_str = spiders.load_template(code_file)
    code_str = code_str.replace('"""', "'''")

    # Make the spider
    spider_file = 'Spider_'+ARGS.name+'_v'+ARGS.version.replace('.', '_')+'.py'
    spider_str = SPIDER_TEMPLATE.format(
        name=ARGS.name,
        inputs=inputs_str,
        outputs=outputs_str,
        code=code_str,
        datatype=ARGS.type,
        version=ARGS.version,
        extension=extension)

    # Write the file
    with open(spider_file, 'w') as f:
        f.write(spider_str)
