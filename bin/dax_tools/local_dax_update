#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os,imp,sys
from dax import processors,ScanProcessor,SessionProcessor,modules,XnatUtils,task,cluster,Task,RESULTS_DIR
from datetime import datetime, timedelta

def parse_args():
    from argparse import ArgumentParser
    ap = ArgumentParser(prog='Manual update', description="Updates all tasks")
    ap.add_argument(dest='settings_path', help='Settings Path')
    ap.add_argument(dest='project', help='Project')
    ap.add_argument(dest='subject', help='List of Subjects separated by a coma')
    return ap.parse_args()

if __name__ == '__main__':   
    args = parse_args()
    settings_path = args.settings_path
    project = args.project
    subjects = args.subject.split(',')
    # Load the settings file
    print('INFO:loading settings from:'+settings_path)
    settings = imp.load_source('settings', settings_path)
    
    # Run the updates
    print('INFO:running update, Start Time:'+str(datetime.now()))
    try:
        xnat=XnatUtils.get_interface()
        
        # Get lists of modules/processors per scan/exp for this project
        if project in settings.myLauncher.project_modules_dict:
            #Modules prerun
            settings.myLauncher.module_prerun(project, 'manual_update')
            sess_mod_list, scan_mod_list = modules.modules_by_type(settings.myLauncher.project_modules_dict[project])            
            
        if project in settings.myLauncher.project_process_dict:        
            sess_proc_list, scan_proc_list = processors.processors_by_type(settings.myLauncher.project_process_dict[project])  
             
        # iterate experiments
        for subject in XnatUtils.list_subjects(xnat,project):
            if subject['label'] in subjects:
	            for sess_info in XnatUtils.list_experiments(xnat, project, subject['label']):
	                sess_id = sess_info['ID']
	                subj_label = sess_info['subject_label']
	                sess_label = sess_info['label']
	                scan_list = []
	                task_list = []
	            
	                print('  +SESS:'+sess_info['label']+':updating...')
	                       
	                if scan_proc_list or scan_mod_list:
	                    scan_list = XnatUtils.list_scans(xnat, project, subject['label'], sess_id)

		            # Modules - run
		            for sess_mod in sess_mod_list:
		                print'      * Module: '+sess_mod.getname()
		                sess_obj = None
		                if (sess_mod.needs_run(sess_info, xnat)):
		                    if sess_obj == None:
		                        sess_obj = XnatUtils.get_full_object(xnat, sess_info)
		                            
		                    sess_mod.run(sess_info, sess_obj)
		                
		            for scan_info in scan_list:
		                print'      +SCAN: '+scan_info['scan_id']
		                scan_obj = None
		                for scan_mod in scan_mod_list:
		                    print'        * Module: '+scan_mod.getname()
		                    if (scan_mod.needs_run(scan_info, xnat)):
		                        if scan_obj == None:
		                            scan_obj = XnatUtils.get_full_object(xnat, scan_info)
		                            
		                        scan_mod.run(scan_info, scan_obj)
		        
		            # Processors - get list of tasks
		            for sess_proc in sess_proc_list:
		                if sess_proc.should_run(sess_info, xnat):
		                    sess_task = sess_proc.get_task(xnat, sess_info, RESULTS_DIR)
		                    task_list.append(sess_task)
		                
		            for scan_info in scan_list:
		                for scan_proc in scan_proc_list:
		                    if scan_proc.should_run(scan_info):
		                        scan_task = scan_proc.get_task(xnat, scan_info, RESULTS_DIR)
		                        task_list.append(scan_task)
		                        
		            print('    DEBUG:Getting list of processors')
		
		            # Processors - update tasks                   
		            for cur_task in task_list:
		                print(' Updating task:'+cur_task.assessor_label)
		                cur_task.update_status()
        
    finally:
        xnat.disconnect()

    print "INFO: Update DONE!"
    
