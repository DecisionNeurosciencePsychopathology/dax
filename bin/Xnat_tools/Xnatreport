#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Query through Xnat

@author: Benjamin Yvernault, Electrical Engineering, Vanderbilt University
'''
import os
import sys
import logging
from dax import XnatUtils
from datetime import datetime
from email.mime.text import MIMEText
from email.MIMEBase import MIMEBase
from email.MIMEMultipart import MIMEMultipart
from email import Encoders
import smtplib

DEFAULT_CSV_LIST=['object_type','project_id','subject_label','session_type','session_label', 'as_label', 'as_type', 'as_description','quality','resource','fpath']

######################################################################################################
########################################## USEFUL FUNCTIONS ##########################################
######################################################################################################
def setup_info_logger(name,logfile):
    if logfile:
        handler=logging.FileHandler(logfile,'w')
    else:
        handler=logging.StreamHandler()
    
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)
    return logger
    
########################################################################################################
########################################## SPECIFIC FUNCTIONS ##########################################
########################################################################################################    
def report_project(xnat,project):
    logger.info('Report for Projects '+project)
    logger.info(','.join(DEFAULT_CSV_LIST))
    #Extract list of scan:
    Scan_list=XnatUtils.list_project_scans(xnat, project)
    #Extract list of assessor:
    Assessor_list=XnatUtils.list_project_assessors(xnat, project)
    #Subject_list:
    subject_list=set([s['subject_label'] for s in Scan_list])
    #Loop on Subject:
    for subject in subject_list:
        #SCAN
        slist=[s for s in Scan_list if s['subject_label']==subject]
        for scan in slist:
            SResources='/'.join([r['label'] for r in XnatUtils.list_scan_resources(xnat,project,scan['subject_label'],scan['session_label'],scan['ID'])])
            logger.info(','.join(['scan',scan['subject_label'],scan['session_type'],scan['session_label'],scan['ID'],scan['type'],scan['series_description'],scan['quality'],SResources]))
                                   
        #ASSESSOR
        alist=[a for a in Assessor_list if a['subject_label']==subject]
        for assessor in alist:
            AResources='/'.join([r['label'] for r in XnatUtils.list_assessor_out_resources(xnat,project,assessor['subject_label'],assessor['session_label'],assessor['label'])])
            logger.info(','.join(['assessor',assessor['subject_label'],assessor['session_type'],assessor['session_label'],assessor['label'],assessor['proctype'],assessor['version'],assessor['qcstatus'],AResources]))

########################################## CHECK OPTIONS ##########################################
def check_options(options):
    #check options :
    if not options.projects:
        print 'OPTION ERROR: No project selected.Please specify one or more project with option -p/--project.'
        return False
    #check the name given
    if options.csvfile:
        folder=os.path.dirname(os.path.abspath(options.csvfile))
        if not os.path.exists(folder):
            print 'OPTION ERROR: the txt file path <'+folder+'> does not exist. Please check the path given.'
            return False
    return True

########################################## MAIN DISPLAY ##########################################
def Main_display(parser):
    (options,args) = parser.parse_args()
    #Display:
    print '################################################################'
    print '#                          XNATREPORT                          #'
    print '#                                                              #'
    print '# Developed by the masiLab Vanderbilt University, TN, USA.     #'
    print '# If issues, email benjamin.c.yvernault@vanderbilt.edu         #'
    print '# Usage:                                                       #'
    print '#     Print a detailed report from XNAT projects               #'
    print '# Parameters :                                                 #'
    if options=={'csvfile': None,'projects': None}:
        print '#     No Arguments given                                       #'
        print '#     Use "Xnatreport -h" to see the options                   #'
        print '################################################################'
        parser.print_help()
        sys.exit()
    else:
        if options.projects:
            print '#     %*s -> %*s#' %(-20,'Project(s)',-33,get_proper_str(options.projects))
        if options.csvfile:
            print '#     %*s -> %*s#' %(-20,'CSV filename',-33,get_proper_str(options.csvfile,True))
        print '################################################################'

def get_proper_str(str_option,end=False):
    if len(str_option)>32:
        if end:
            return '...'+str_option[-29:]
        else:
            return str_option[:29]+'...'
    else:
        return str_option

def get_usage():
    usage="usage: %prog [options] \n"
    usage+="What is the script doing : \n"
    usage+="   *Create a report about Xnat projects.\n"
    #Example
    usage+="Examples:\n"
    usage+="   *Report of a project: Xnatreport -p PID \n"
    usage+="   *Save report in a csv: Xnatreport -p PID -c report.csv\n"
    return usage
    
def parse_args():
    from optparse import OptionParser
    usage = get_usage()
    parser = OptionParser(usage=usage)
    parser.add_option("-p", "--project", dest="projects",default=None,
                  help="List of project ID on Xnat separate by a coma", metavar="PROJECT_ID")
    parser.add_option("-c", "--csvfile", dest="csvfile",default=None,
                  help="csv fullpath where to save the report.", metavar="CSV_FULLPATH_FILE")
    return parser
    
if __name__ == '__main__':
    parser=parse_args()
    (options,args) = parser.parse_args()
    #############################
    #Main display:
    Main_display(parser)
    #check options:
    run=check_options(options)
    #############################
    logger = setup_info_logger('xnatreport',options.csvfile)
    
    #############################
    # RUN                       #
    #############################
    if run:
        #############################
        #Arguments :
        project_list=options.projects.split(',')       
        
        """ Report on Xnat database for the list of project for processes or resources on scan """
        # Connection to Xnat
        try:
            str_report='==========================================================================\n'
            logger.info("Report for the following project(s):")
            logger.info('------------------------------------')
            for project in project_list:
                logger.info('  -'+project)
            logger.info('------------------------------------')
            logger.info('Date: '+str(datetime.now())+'\n')
            
            #connection to Xnat
            xnat = XnatUtils.get_interface()
            
            #Starting querying :
            for project in project_list:
                #check if the project exists:
                project_xnat=xnat.select('/project/'+project)
                if not project_xnat.exists():
                    logger.info('ERROR: Project '+project+' does not exist on Xnat.')
                    pass
                else:
                    report_project(xnat,project)
        finally:                                        
            xnat.disconnect()
