#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Created on May 6, 2013

@author: Benjamin Yvernault, Electrical Engineering, Vanderbilt University
'''

import os,sys,logging
from dax import XnatUtils

######################################################################################################
########################################## USEFUL FUNCTIONS ##########################################
######################################################################################################
def setup_info_logger(name,logfile):
    if logfile:
        handler=logging.FileHandler(logfile,'w')
    else:
        handler=logging.StreamHandler()
    
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)
    return logger
    
def get_xnat_resource(xnat_dict,resource):
    if 'scan_id' in xnat_dict:
        return xnat.select('/projects/'+xnat_dict['project_id']+'/subjects/'+xnat_dict['subject_id']+'/experiments/'+xnat_dict['session_id']+'/scans/'+xnat_dict['ID']+'/resource/'+resource)
    else:
        return xnat.select('/projects/'+xnat_dict['project_id']+'/subjects/'+xnat_dict['subject_id']+'/experiments/'+xnat_dict['session_id']+'/assessors/'+xnat_dict['label']+'/out/resource/'+resource)

def display_count(nb):
    sys.stdout.write("   -- Number of Processes/scans found missing the resource(s): "+str(nb)+" --\n")
    sys.stdout.flush()

def get_proper_str(str_option,end=False):
    if len(str_option)>55:
        if end:
            return '...'+str_option[-50:]
        else:
            return str_option[:50]+'...'
    else:
        return str_option
    
def get_option_list(option):
    if not option:
        return None
    elif option=='all':
        return 'all'
    elif option=='nan':
        return None
    else:
        return option.split(',')

def get_size(size):
    if not size:
        return None
    elif 'g' in size.lower():
        size=int(size.lower().split('g')[0])*1024*1024*1024 #bring back to bytes
    elif 'm' in size.lower():
        size=int(size.lower().split('m')[0])*1024*1024 #bring back to bytes
    elif 'k' in size.lower():
        size=int(size.lower().split('k')[0])*1024 #bring back to bytes
    else:
        size=int(size)
    return size
    
def filter_subj_sess(subjects,sessions,obj_list):
    obj_list_subj=[]
    obj_list_sess=[]
    if subjects:
        obj_list_subj=filter(lambda x: x['subject_label'] in subjects, obj_list)
    if sessions:
        obj_list_sess=filter(lambda x: x['session_label'] in sessions, obj_list)
    return obj_list_subj+obj_list_sess

def filter_attributes(scantypes,qualities,SDs,proctypes,status,qastatus,obj_list):
    if 'type' in obj_list[0].keys():
        if scantypes and scantypes!='all':
            obj_list=filter(lambda x: x['type'] in scantypes, obj_list)
        if qualities and qualities!='all':
            obj_list=filter(lambda x: x['quality'] in qualities, obj_list)
        if SDs and SDs!='all':
            obj_list=filter(lambda x: x['series_description'] in SDs, obj_list)
    if 'proctype' in obj_list[0].keys():
        if proctypes and proctypes!='all':
            obj_list=filter(lambda x: x['proctype'] in proctypes, obj_list)
        if status and status!='all':
            obj_list=filter(lambda x: x['procstatus'] in status, obj_list)
        if qastatus and qastatus!='all':
            obj_list=filter(lambda x: x['qcstatus'] in qastatus, obj_list)
        
    return obj_list

def read_project_list(inputfile,delimiter):
    project_list=list()
    f = open(report_file,'r')
    for line in f:
        if line.strip().split(delimiter)[0]!='Project':
            project_list.append(line.strip().split(delimiter)[0])
    return project_list

def extract_xnat_info(xnat,options,project):
    #Options:
    #scan attrs:
    scantypes = get_option_list(options.scantype)
    qualities = get_option_list(options.quality)
    SDs = get_option_list(options.SD)
    #Proc attrs
    proctypes = get_option_list(options.assessortype)
    status = get_option_list(options.status)
    qastatus = get_option_list(options.qastatus)
    #XNAT option
    if not options.subject:
        subjects=None
    elif options.subject=='all':
        subjects=None
    else:
        subjects=options.subject.split(',')
    if not options.session:
        sessions=None
    elif options.session=='all':
        sessions=None
    else:
        sessions=options.session.split(',')
    
    #If inputfile, get data from it:
    if options.inputfile:
        xnat_dict_list=[]
        f = open(options.inputfile,'r')
        for line in f:
            #Not the header
            labels=line.strip().split(options.delimiter)
            if labels[0]==project:
                obj_dict=dict()
                obj_dict['project_id']=labels[0]
                obj_dict['subject_id']=labels[1]
                obj_dict['subject_label']=labels[1]
                obj_dict['session_id']=labels[2]
                obj_dict['session_label']=labels[2]
                if '-x-' in labels[3]:
                    obj_dict['label']=labels[3]
                else:
                    obj_dict['ID']=labels[3]
                    obj_dict['scan_id']=labels[3]
                if len(labels)>4 and not options.resource:
                    obj_dict['resource_label']=labels[4]
                xnat_dict_list.append(obj_dict)
        
        #if resource set, remove the multiple same line.
        if options.resource:
            unique_sets = set(frozenset(d.items()) for d in xnat_dict_list)
            xnat_dict_list = [dict(s) for s in unique_sets]
            
    #If not, read from xnat
    else:
        #Extract informations: 
        if scantypes or qualities or SDs:
            xnat_dict_list=XnatUtils.list_project_scans(xnat, project)
        elif proctypes or status or qastatus_list:
            xnat_dict_list=XnatUtils.list_project_assessors(xnat, project)
        else:
            return []
        #filter the subject or session if exists:
        if subjects or sessions:
            xnat_dict_list=filter_subj_sess(subjects,sessions,xnat_dict_list)
        #filter attributes
        xnat_dict_list=filter_attributes(scantypes,qualities,SDs,proctypes,status,qastatus,xnat_dict_list)
    
    #Sort the list
    xnat_dict_list=sorted(xnat_dict_list, key=lambda k: k['subject_label'])
        
    return xnat_dict_list

########################################################################################################
########################################## SPECIFIC FUNCTIONS ##########################################
########################################################################################################
def check_resource(Resource,ID,size,count):
    #if resource doesn't exist, print label
    if not Resource.exists():
        logger.info(ID)
        count+=1
    else:
        if len(Resource.files().get())==0:
            logger.info(ID)
            count+=1
        elif size:
                Bigger_file_size=0
                for fname in Resource.files().get()[:]:
                    size_file=int(Resource.file(fname).size())
                    if Bigger_file_size<size_file:
                        Bigger_file_size=size_file
                
                #if the size of the resource is less that the size
                if Bigger_file_size<size:
                    logger.info(ID)
                    count+=1               
    return count

########################################## CHECK SCANS ########################################## 
def check_xnat_list(xnat,xnat_dict_list,resources,size,delimiter):
    count=0
    print '  --info: checking xnat objects ...'
    logger.info(delimiter.join(['Project','Subject','Session','Scan/assessor','Resource missing or under-size']))
    for xnat_dict in xnat_dict_list:
        if 'scan_id' in xnat_dict:
            key='ID'
        else:
            key='label'
        if resources:
            for resource in resources:
                Resource=get_xnat_resource(xnat_dict,resource)
                ID=delimiter.join([project,xnat_dict['subject_label'],xnat_dict['session_label'],xnat_dict[key],resource])
                count=check_resource(Resource,ID,size,count)
        elif 'resource_label' in xnat_dict:
            Resource=get_xnat_resource(xnat_dict,xnat_dict['resource_label'])
            ID=delimiter.join([project,xnat_dict['subject_label'],xnat_dict['session_label'],xnat_dict[key],xnat_dict['resource_label']])
            count=check_resource(Resource,ID,size,count)
        else:
            logger.info(delimiter.join([project,xnat_dict['subject_label'],xnat_dict['session_label'],xnat_dict[key]]))
            count+=1
    
    #display the count found:
    display_count(count)

########################################## CHECK OPTIONS ##########################################
def check_options(options):
    #Checked argument values if not:
    if options.outputfile and not os.path.exists(os.path.dirname(os.path.abspath(options.outputfile))):
        print "OPTION ERROR: the main folder for "+options.outputfile+" does not exist."
        return False
    if options.inputfile and not os.path.exists(os.path.abspath(options.inputfile)):
        print 'OPTION ERROR: the inputfile options: '+options.outputfile+' does not exist.'
        return False
    return True

########################################## MAIN DISPLAY ##########################################
def Main_display(parser):
    (options,args) = parser.parse_args()
    print '####################################################################################################'
    print '#                                             XNATCHECK                                            #'
    print '#                                                                                                  #'
    print '# Developed by the masiLab Vanderbilt University, TN, USA.                                         #'
    print '# If issues, email benjamin.c.yvernault@vanderbilt.edu                                             #'
    print '# Parameters :                                                                                     #'
    if options=={'SD':None, 'qastatus':None,'status': None, 'assessortype': None, 'scantype': None, 'resource': None, 'txtfile': None, 'project': None, 'session': None, 'size': None, 'quality': None, 'subject': None}:
        print '#     No Arguments given                                                                           #'
        print '#     Use "Xnatcheck -h" to see the options                                                        #'
        print '####################################################################################################'
        parser.print_help()
        sys.exit()
    else:
        if options.inputfile:
            print '#     %*s ->  %*s#' %(-30,'Input File Path',-58,get_proper_str(options.inputfile,True))
        if options.outputfile:
            print '#     %*s ->  %*s#' %(-30,'Output File Path',-58,get_proper_str(options.outputfile,True))
        if options.delimiter:
            print '#     %*s ->  %*s#' %(-30,'Delimiter for output',-58,get_proper_str(options.delimiter))
        if options.project:
            print '#     %*s ->  %*s#' %(-30,'Project(s)',-58,get_proper_str(options.project))
        #Subjects
        if options.subject:
            print '#     %*s ->  %*s#' %(-30,'Subject(s)',-58,get_proper_str(options.subject))
        #Experiment
        if options.session:
            print '#     %*s ->  %*s#' %(-30,'Session(s)',-58,get_proper_str(options.session))
        
        if options.scantype or options.quality or options.SD:
            print '#     %*s#' %(-93,'--Scan Options--')
            if options.scantype:
                print '#     %*s ->  %*s#' %(-30,'Types',-58,get_proper_str(options.scantype))
            if options.quality:
                print '#     %*s ->  %*s#' %(-30,'Quality',-58,get_proper_str(options.quality))
            if options.SD:
                print '#     %*s ->  %*s#' %(-30,'Series Description',-58,get_proper_str(options.SD))
        
        if options.assessortype or options.status:
            print '#     %*s#' %(-93,'--Process Options--') 
            if options.assessortype:
                print '#     %*s ->  %*s#' %(-30,'Types',-58,get_proper_str(options.assessortype))
            if options.status:
                print '#     %*s ->  %*s#' %(-30,'Status',-58,get_proper_str(options.status))
            if options.qastatus:
                print '#     %*s ->  %*s#' %(-30,'QA Status',-58,get_proper_str(options.qastatus))
        
        if options.resource or options.size:
            print '#     %*s#' %(-93,'--Resource Options--')
            if options.resource:
                print '#     %*s ->  %*s#' %(-30,'Types',-58,get_proper_str(options.resource))
            if options.size:
                print '#     %*s ->  %*s#' %(-30,'Minimal size to check (Kb)',-58,options.size)           
        print '####################################################################################################'

########################################## OPTIONS ##########################################
def parse_args():
    from optparse import OptionParser
    usage = "usage: %prog [options] \nWhat is the script doing : Check a project on Xnat for assessor type / scan type / resources "
    parser = OptionParser(usage=usage)
    #need this options
    parser.add_option("-p", "--project", dest="project",default=None,
                  help="Project ID on Xnat or a list of Project", metavar="PROJECT_ID")
    
    #select a special subj or sess
    parser.add_option("--subj", dest="subject",default=None,
                  help="Change Status for only this subject/list of subjects. E.G: --subj VUSTP2,VUSTP3", metavar="LIST_OF_SUBJECTS")
    parser.add_option("--sess", dest="session",default=None,
                  help="Change Status for only this session/list of sessions. Use the options --subj with it. E.G: --exp VUSTP2a,VUSTP3b", metavar="LIST_OF_EXPERIMENTS")
    
    #scan attrs
    parser.add_option("-s", "--scantype", dest="scantype",default=None,
                  help="Check if the scan type exists for each subject/experiment in the project. E.G : -s fMRI,T1", metavar="SCAN_TYPE")
    parser.add_option("--quality", dest="quality",default=None,
                  help="Check if the scan has the quality specified. E.G: unusable or questionable or usable.", metavar="QUALITY")
    parser.add_option("--seriesD", dest="SD",default=None,
                  help="Check if the scan has the series description specified. E.G: cap1,cap2,gonogo1,T1W.", metavar="SD")
    
    #proc attrs
    parser.add_option("-t", "--typeprocess", dest="assessortype",default=None,
                  help="Check if the process exists for each subject/experiment in the project. E.G : -a fMRIQA,dtiQA_v2", metavar="ASSESSOR_TYPE")
    parser.add_option("--status", dest="status",default=None,
                  help="Check if the assessor has the status specified. E.G : COMPLETE,JOB_FAILED.", metavar="STATUS")
    parser.add_option("--qastatus", dest="qastatus",default=None,
                  help="Check if the assessor has the qastatus specified. E.G : Passes,Failed.", metavar="STATUS")
    
    #Resource
    parser.add_option("-r","--resources", dest="resource",default=None,
                  help="Check if the resources exists.", metavar="RESOURCES")
    parser.add_option("--size", dest="size",default=None,
                  help="Check the size of the resource. If the file with the bigger size in the resource is under the size you are giving or if the resource doesn't exist, it will display the label on the screen. Units by default bytes. E.G: 6M or 7G or 8k or 10K or 10000", metavar="SIZE")
    
    #File text with the assessor to check
    parser.add_option("-i","--inputfile",dest="inputfile",default=None,
                  help="File path as inputs that will be read for XNAT information. E.G: Project,subject,session,scan/assessor,resource. Delimiter can be set as an options.", metavar="FILEPATH")
    parser.add_option("-o","--outputfile",dest="outputfile",default=None,
                  help="File path to save the output.", metavar="FILEPATH")
    parser.add_option("-d","--delimiter",dest="delimiter",default=',',
                  help="Delimiter for the output file. Default: comma.", metavar="FILEPATH")
    return parser

###################################################################################################
########################################## MAIN FUNCTION ##########################################
###################################################################################################
if __name__ == '__main__':
    parser=parse_args()
    (options,args) = parser.parse_args()
    #############################
    #Main display:
    Main_display(parser)
    #check options:
    run=check_options(options)
    #############################
    logger = setup_info_logger('xnatcheck',options.outputfile)
    
    #############################
    # RUN                       #
    #############################
    if run:
        #############################
        #Arguments :
        project_list = get_option_list(options.project)
        #resources
        resources = get_option_list(options.resource)
        size = get_size(options.size)
        
        if options.inputfile and not project_list:
            project_list=read_project_list(options.inputfile,options.delimiter)
            
        # Connection to Xnat
        try:   
            xnat = XnatUtils.get_interface()
            for project in project_list:
                print" *Project: "+project
                #check access
                proj=xnat.select('/project/'+project)
                if not proj.exists():
                    print'  -->ERROR: Project '+project+' does not exist on XNAT.'
                    continue
                else:
                    post_uri_subject = '/REST/projects/'+project+'/subjects'
                    subject_list = xnat._get_json(post_uri_subject)
                    number_subjs=len(subject_list) 
                    if not number_subjs>0:
                        print"  -->ERROR: You don't access to the project: "+project+"."
                        continue
                
                #Read data from inputfile if it exists:
                xnat_dict_list=extract_xnat_info(xnat,options,project)
                #Check all the xnat objects from the inputs
                check_xnat_list(xnat,xnat_dict_list,resources,size,options.delimiter)
                                
        finally:                                        
            xnat.disconnect()
    print '===================================================================\n'
