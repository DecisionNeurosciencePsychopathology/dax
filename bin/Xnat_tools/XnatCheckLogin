#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Created on Jan 24, 2013
Edited on February 26,2015
Edited on January 25, 2017

@author: byvernault
'''

import os
import sys
import stat
import netrc
import getpass
from pyxnat import Interface
from pyxnat.core.errors import DatabaseError

__exe__ = 'XnatCheckLogin'
__purpose__ = "Set and Check the logins for XNAT."
XNAT_NETRC_FILE = os.path.join(os.path.expanduser('~'), '.xnatnetrc')
NETRC_TEMPLATE = """machine {host}
        login {user}
        password {pwd}
"""
BASH_PROFILE_XNAT = """# Xnat Host for default dax executables:
{export_cmd}
"""


def test_connection_xnat(host, user, pwd):
    """
    Method to check connection to XNAT using host, user, pwd.

    :param host: Host for XNAT
    :param user: User for XNAT
    :param pwd: Password for XNAT
    :return: True if succeeded, False otherwise.
    """
    msg = '  Connecting to host <%s> with user <%s>...'
    sys.stdout.write(msg % (host, user))
    try:
        xnat = Interface(host, user, pwd)
        # try deleting SESSION connection
        xnat._exec('/data/JSESSION', method='DELETE')
        print ' --> Good login.'
        return True
    except DatabaseError:
        print ' --> error: Wrong login.'
        return False


def add_host(host):
    """
    Method to add host to netrc file if not already there.

    :param host: Host for XNAT
    :return: None
    """
    # Test connection for new XNAT host
    connection = False
    while not connection:
        user = raw_input("Please enter your XNAT username: ")
        pwd = getpass.getpass(prompt='Please enter your XNAT password: ')
        print 'Checking XNAT logins for host: <%s>' % host
        connection = test_connection_xnat(host, user, pwd)

    with open(XNAT_NETRC_FILE, "a") as f_netrc:
        lines = NETRC_TEMPLATE.format(host=host, user=user, pwd=pwd)
        f_netrc.writelines(lines)
    # Changing mod of the file:
    os.chmod(XNAT_NETRC_FILE, stat.S_IWUSR | stat.S_IRUSR)
    print 'Login saved.'


def get_xnat_netrc_obj():
    """Load netrc file object.

    :return: netrc
    """
    if not os.path.isfile(XNAT_NETRC_FILE):
        print 'Warning: No XNAT netrc file found. Setting it...'
        host = raw_input("Please enter your XNAT host: ")
        add_host(host)

        # add XNAT_HOST to your profile file:
        qst = 'Do you want to use host <%s> as default?'
        yes = prompt_user_yes_no(qst)
        if yes:
            add_to_profile(host)

    return netrc.netrc(XNAT_NETRC_FILE)


def add_to_profile(host):
    """Function to init your profile file to call xnat_profile.

    :param host: Host of XNAT to add to your profile
    :return: None
    """
    profile = None
    if os.path.exists(os.path.join(os.path.expanduser('~'), '.bash_profile')):
        profile = os.path.join(os.path.expanduser('~'), '.bash_profile')
    elif os.path.exists(os.path.join(os.path.expanduser('~'), '.bashrc')):
        profile = os.path.join(os.path.expanduser('~'), '.bashrc')
    elif os.path.exists(os.path.join(os.path.expanduser('~'), '.profile')):
        profile = os.path.join(os.path.expanduser('~'), '.profile')
    else:
        print "Warning: profile file not found. Please add XNAT_HOST \
to your environment variables manually."

    # Add the line to the profile
    line_to_add = 'export XNAT_HOST=%s' % host
    if 'XNAT_HOST' not in open(profile).read():
        with open(profile, "a") as f_profile:
            f_profile.write(BASH_PROFILE_XNAT.format(export_cmd=line_to_add))
    else:
        print 'Warning: XNAT_HOST already set in your profile file. \
Please edit it.'


def check_settings(netrc_obj, host):
    """
    Method to check the settings for host in xnatnetrc

    :param netrc_obj: netrc object for xnatnetrc
    :param host: Xnat Host URL
    :return: None
    """
    if not host:
        host = None
        while not host:
            host = raw_input("Please enter the XNAT host you want to check: ")
            if not host:
                print 'You need to provide a value.'
    netrc_info = netrc_obj.authenticators(host)
    if not netrc_info:
        print 'Warning: no information stored for host <%s>.' % host
        qst = 'Do you want to save XNAT host <%s> information?'
        yes = prompt_user_yes_no(qst % host)
        if yes:
            add_host(host)
        else:
            return
    else:
        print 'Host <%s> logins found. Checking login information ...' % host
        test_connection_xnat(host, netrc_info[0], netrc_info[2])


def parse_args():
    """
    Method to parser arguments following ArgumentParser

    :return: arguments parsed
    """
    from argparse import ArgumentParser
    ap = ArgumentParser(prog=__exe__, description=__purpose__)
    ap.add_argument('--host', dest='host', default=None, help='Host for XNAT.')
    return ap.parse_args()


def prompt_user_yes_no(question):
    """Prompt the user for a question with answer Y/N.

    :return: True if yes, False if no, ask again if any other answer
    """
    value = ''
    while value.lower() not in ['yes', 'no', 'n', 'y']:
        value = raw_input("%s [yes/no] " % question)
    if value.lower() in ['yes', 'y']:
        return True
    else:
        return False


if __name__ == '__main__':
    args = parse_args()
    print '==================================================================='
    print 'Checking your settings for XNAT in xnatnetrc file:'
    netrc_obj = get_xnat_netrc_obj()
    if not args.host:
        yes = prompt_user_yes_no('Do you want to see the xnat host saved?')
        if yes:
            print 'XNAT Hosts stored:'
            for host in netrc_obj.hosts.keys():
                print '  - %s' % host
    check_settings(netrc_obj, args.host)
    print '==================================================================='
