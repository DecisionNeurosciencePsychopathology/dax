#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Created on Mar 13, 2013

@author: Benjamin Yvernault, Electrical Engineering, Vanderbilt University
'''

import os,sys,csv,glob
from datetime import datetime
from dax import XnatUtils

######################################################################################################
########################################## USEFUL FUNCTIONS ##########################################
######################################################################################################
def list_out_resources(xnat,assessor_label):
    labels=assessor_label.split('-x-')
    post_uri_out_resource = '/REST/projects/'+labels[0]+'/subjects/'+labels[1]+'/experiments/'+labels[2]+'/assessors/'+assessor_label+'/out/resources'
    return xnat._get_json(post_uri_out_resource)

def read_csv_info(csvfile):
    print'INFO: Reading the csv file: '+csvfile
    #variables:
    labels_dict=dict()
    f=open(csvfile, "rU")
    reader = csv.reader(f,delimiter=',', dialect=csv.excel_tab)
    for row in reader:
        if 'assessor_label' in row[0].strip().lower():
            continue
        if len(row)==3:
            res_dict=dict()
            assessor_label=row[0]
            resource=row[1]
            res_path=row[2]
            if assessor_label in labels_dict.keys():
                if resource in labels_dict[assessor_label].keys():
                    labels_dict[assessor_label][resource].append(res_path)
                else:
                    labels_dict[assessor_label][resource]=[res_path]
            else:
                labels_dict[assessor_label]={resource:[res_path]}
    return labels_dict

def go_through_folder(directory):
    print'INFO: Going through the folder: '+directory
    #variables:
    labels_dict=dict()
    for assessor_label in os.listdir(directory):
        assessor_path=os.path.join(directory,assessor_label)
        if not os.path.isdir(assessor_path):
            print ' WARNING: '+assessor_path+' is not a folder. It will not get upload.'
        else:
            for resource in os.listdir(assessor_path):
                res_path=os.path.join(assessor_path,resource)
                if not os.path.isdir(res_path):
                    print ' WARNING: '+res_path+' is not a folder. It will not get upload.'
                else:
                    if assessor_label in labels_dict.keys():
                        if resource in labels_dict[assessor_label].keys():
                            labels_dict[assessor_label][resource].append(res_path)
                        else:
                            labels_dict[assessor_label][resource]=[res_path]
                    else:
                        labels_dict[assessor_label]={resource:[res_path]}
    return labels_dict

def clean_directory(folder_name):
    files=os.listdir(folder_name)
    for f in files:
        if os.path.isdir(folder_name+'/'+f)==False:
            os.remove(folder_name+'/'+f)
        else:
            shutil.rmtree(folder_name+'/'+f)
    return 0

def extract_assessor_info(assessor_label):
    proc_dict=dict()
    #Get the Project Name, the subject label, the experiment label and the assessor label from the folder name :
    labels=assessor_label.split('-x-')
    if len(labels)>3:
        proc_dict['label']=assessor_label
        proc_dict['project']=labels[0]
        proc_dict['subject']=labels[1]
        proc_dict['session']=labels[2]
        #The Process name is the last labels
        proc_dict['proctype']=labels[-1]
        
        return proc_dict
    else:
        return None
    
######################################### REPORT ###############################################
def make_report(labels_dict,assessor_list):    
    #Display:
    str_report='Report information about uploading :\n'
    str_report+='Date: '+str(datetime.now())+'\n'
    str_report+='===================================================================\n'
    str_report+='List of the data that need to be upload : \n'
    str_report+='-----------------------------------------\n'
    str_report+='%*s | %*s | %*s | %*s ' % (-10, 'Project',-50, 'Assessor Label', -15, 'Resource',-58, 'file(s)/folder')+'\n'
    str_report+='----------------------------------------------------------------------------------------------------------------------------------------------------------\n'
    for assessor_label in sorted(assessor_list):
        if len(labels_dict[assessor_label])>0:
            if len(assessor_label.split('-x-'))>3:
                project=assessor_label.split('-x-')[0]
            else:
                project=''
            #loop on resource
            index=0
            for res,path_list in labels_dict[assessor_label].items():
                for path in path_list:
                    if index==0:
                        str_report+='%*s | %*s | %*s | %*s ' % (-10,project,-50,assessor_label,-15,res,-58,get_proper_str(path,end=True))+'\n'
                    else:
                        str_report+='%*s | %*s | %*s | %*s ' % (-10,' ',-50,' ',-15,res,-58,get_proper_str(path,end=True))+'\n'
                    index+=1
            
    str_report+='\n-----------------------------------------\n'
    
    str_report+='P.S : Please check that the REC or NII image type that you upload are compressed (.rec/.nii), please compress them in .gz like "file.nii.gz".\n'
    
    #Print or write in files:
    print '\n----------------------------------'
    print str_report

########################################################################################################
########################################## SPECIFIC FUNCTIONS ##########################################
########################################################################################################
def FS_Upload(session_obj,assessor_label,resource_dict,force,delete,deleteAll):
    #Variable:
    new_assessor=False
    #Create the assessor if needed
    assessor_obj=session_obj.assessor(assessor_label)
    if assessor_obj.exists() and deleteAll:
        #delete all resources previously on the assessor
        for resource in list_out_resources(xnat,assessor_label):
            assessor_obj.resource(resource['label']).delete()
        assessor_obj.attrs.set('proc:genProcData/procstatus','UPLOADING')
        assessor_obj.attrs.set('proc:genProcData/validation/status','Job Pending')
    elif not assessor_obj.exists():
        assessor_obj,new_assessor=create_assessor(session_obj,assessor_label,'FS')

    #Upload other resources:
    for resource,fpath_list in resource_dict.items():
        print '    -Upload resource: ' +resource
        if not fpath_list:
            print '    -->WARNING:cannot upload resource '+resource+', no path set.'
        else:
            if resource=='XML':
                if len(fpath_list)>1:
                    print '    -->WARNING:more than one XML file, the first one found will be used.'
                assessor_obj.create(xml=fpath_list[0],allowDataDeletion=False)
            if resource=='PDF':
                #make Snapshots and upload it:
                if len(fpath_list)>1:
                    print '    -->WARNING:more than one PDF file path, the first one found will be used to create the snapshots.'
                make_upload_snapshots(assessor_obj,fpath_list[0],force,delete)
            #Upload Resources:
            upload_resource(assessor_obj.out_resource(resource),resource,fpath_list,force,delete) 
        
    if deleteAll or new_assessor:
        #upload finish
        assessor_obj.attrs.set('fs:fsData/procstatus','COMPLETE')
        assessor_obj.attrs.set('fs:fsData/validation/status','Needs QA')
        
def DefaultProcess_Upload(assessor_obj,resource_dict,force,delete,deleteAll,new_assessor=False):
    #delete all resources previously on the assessor
    if deleteAll:
        for resource in list_out_resources(xnat,assessor_obj.label()):
            assessor_obj.out_resource(resource['label']).delete()
        assessor_obj.attrs.set('proc:genProcData/procstatus','UPLOADING')
        assessor_obj.attrs.set('proc:genProcData/validation/status','Job Pending')
    #Upload
    for resource,fpath_list in resource_dict.items():
        print '    -Upload resource: ' +resource
        if not fpath_list:
            print '    -->WARNING:cannot upload resource '+resource+', no path set.'
        else:
            if resource=='PDF':
                #make Snapshots and upload it:
                if len(fpath_list)>1:
                    print '    -->WARNING:more than one PDF file path, the first one found will be used to create the snapshots.'
                make_upload_snapshots(assessor_obj,fpath_list[0],force,delete)
            #Upload Resources:
            upload_resource(assessor_obj.out_resource(resource),resource,fpath_list,force,delete)                  
    #If new or resources deleted:
    if (deleteAll or new_assessor):
        #upload finish
        assessor_obj.attrs.set('proc:genProcData/procstatus','COMPLETE')
        assessor_obj.attrs.set('proc:genProcData/validation/status','Needs QA')

def make_upload_snapshots(assessor_obj,pdfpath,force,delete):
    #Check the path if it's a file or not:
    if os.path.isfile(pdfpath) and not pdfpath.endswith('.pdf'):
        print '    -->WARNING:cannot create snapshots from PDF, wrong format (not .pdf).'
    if os.path.isdir(pdfpath):
        pdf_list=glob.glob(os.path.join(pdfpath,'*.pdf'))
        if len(pdf_list)==0:
            print '    -->WARNING:cannot create snapshots from PDF, no ".pdf" file in the path given for PDF.'
            return
        elif len(pdf_list)>1:
            print '    -->WARNING:more than one PDF file path, the first one found will be used to create the snapshots.'
        else:
            pdfpath=pdf_list[0]
    
    if delete:
        assessor_obj.out_resource('SNAPSHOTS').delete()

    #SNAPSHOTS : create it in the /tmp/ folder under the assessor name
    tmppath=os.path.join('/tmp',assessor_obj.label()+'_snapshots')
    if not os.path.exists(tmppath):
        os.mkdir(tmppath)
    #clear folder:
    clean_directory(tmppath)
    print '     +creating original SNAPSHOTS                                        '
    #Make the snapshots for the assessors with ghostscript
    snapshot_original = os.path.join(tmppath,'snapshot_original.png')
    os.system('gs -q -o '+snapshot_original+' -sDEVICE=pngalpha -dLastPage=1 '+pdfpath)
    #Name of the preview snapshot
    if os.path.exists(snapshot_original):
        print '     +creating preview of SNAPSHOTS                                        '
        snapshot_preview = os.path.join(tmppath,'snapshot_preview.png')
        #Make the snapshot_thumbnail
        os.system('convert '+snapshot_original+' -resize x200 '+snapshot_preview)
    
    #Uploading:
    if not os.path.exists(snapshot_original) or not os.path.exists(snapshot_preview):
        print '     -ERROR: Failed to create preview/original for snapshots of PDF.                                     '
    else:
        print '     -Uploading SNAPSHOTS ...                                        '
        #upload the THUMBNAIL & ORIFINAL:
        assessor_obj.out_resource('SNAPSHOTS').file(os.path.basename(snapshot_preview)).put(snapshot_preview,(snapshot_preview.split('.')[1]).upper(),'THUMBNAIL')
        assessor_obj.out_resource('SNAPSHOTS').file(os.path.basename(snapshot_original)).put(snapshot_original,(snapshot_original.split('.')[1]).upper(),'ORIGINAL')
            
def upload_resource(resourceObj,resource,fpath_list,force,delete):
    #check if the resource exist, if yes remove it
    if delete:
        #Delete previous files
        resourceObj.delete()
               
    for fpath in fpath_list:
        if not os.path.exists(fpath):
            print '    -->ERROR:cannot upload the file/folder path :'+fpath+'. It does not exist.'
        #Upload Folder
        if os.path.isdir(fpath):
            if fpath[-1]=='/':
                fpath=fpath[:-1]
            if not resourceObj.exists() or force:
                 Upload_folder_to_resource(resource,resourceObj,fpath)
            else:
                print '     -->WARNING: The folder you want to upload corresponds to an existing resource on XNAT. Use --force to force the overwrite of this files or delete to --delete the previous resource.'
        #Upload File
        elif os.path.isfile(fpath):
            Upload_file_to_resource(resource,resourceObj,fpath,force)

def Upload_file_to_resource(label,resourceObj,fpath,force):
    # upload file to XNAT
    if not resourceObj.file(os.path.basename(fpath)).exists() or force:
        resourceObj.file(os.path.basename(fpath)).put(fpath)
        print '     file ' +fpath+' uploaded'
        return True
    else:
        print '     -->WARNING: The file you want to upload already exists. Use --force to delete this resource and create a new one with this file.'
        return False
                
def Upload_folder_to_resource(label,resourceObj,directory):
    filenameZip=label+'.zip'
    initDir=os.getcwd()
    #Zip all the files in the directory
    os.chdir(directory)
    os.system('zip -r '+filenameZip+' *')
    #upload
    resourceObj.put_zip(os.path.join(directory,filenameZip),extract=True)
    #remove the tmp zip file:
    if os.path.exists(os.path.join(directory,filenameZip)):
        os.remove(os.path.join(directory,filenameZip))
    #return to the initial directory:
    os.chdir(initDir)
    print '     all files in ' +directory+' uploaded'
    
def create_assessor(session_obj,assessor_label,proctype):
    #ASSESSOR in the experiment
    ASSESSOR=session_obj.assessor(assessor_label)
    new_assessor=False
    #existence :
    if not ASSESSOR.exists():
        new_assessor=True
        if proctype=='FS':
            #create the assessor and set the status 
            ASSESSOR.create(assessors='fs:fsData', **{'fs:fsData/fsversion':'0'})
            #Set attributes
            ASSESSOR.attrs.set('fs:fsData/procstatus','UPLOADING') #Set to uploading files
            ASSESSOR.attrs.set('fs:fsData/validation/status','Job Pending')
            ASSESSOR.attrs.set('fs:fsData/proctype', 'FreeSurfer')
            now=datetime.now()
            today=str(now.year)+'-'+str(now.month)+'-'+str(now.day)
            ASSESSOR.attrs.set('fs:fsData/date',today)
        else:
            #create the assessor and set the status 
            ASSESSOR.create(assessors='proc:genProcData')
            #Set attributes
            ASSESSOR.attrs.set('proc:genProcData/procstatus','UPLOADING') #Set to uploading files
            ASSESSOR.attrs.set('proc:genProcData/validation/status','Job Pending')
            ASSESSOR.attrs.set('proc:genProcData/proctype', proctype)
            now=datetime.now()
            today=str(now.year)+'-'+str(now.month)+'-'+str(now.day)
            ASSESSOR.attrs.set('proc:genProcData/date',today)
            
    return ASSESSOR,new_assessor

def generate_data_dict(uploaddir,csvfile):
    #Get the labels dictionary: {assessor_label:{'resource name1': 'resource path1',...},..}
    if csvfile:
        labels_dict=read_csv_info(csvfile)
    else:
        labels_dict=go_through_folder(uploaddir)
    #Get the list of assessor labels 
    assessor_list=set(sorted(labels_dict.keys()))
        
    return assessor_list,labels_dict
    
def upload_assessor_xnat(xnat,uploaddir,csvfile,report,force,delete,deleteAll):
    #Generate dict from directory or csv file:
    assessor_list,labels_dict=generate_data_dict(uploaddir,csvfile)
    nb_assessor=len(assessor_list)
    if not assessor_list:
        print ' ->WARNING: No data found. Check the inputs given to the script.'
        sys.exit()
    if report:
        make_report(labels_dict,assessor_list)
    else:
        #For the data found:
        for index,assessor_label in enumerate(assessor_list):
            print ' *Assessor : '+str(index+1)+'/'+str(nb_assessor)+' -- name: '+assessor_label+' -- time: '+str(datetime.now())+'          '
            proc_dict=extract_assessor_info(assessor_label)
            if not proc_dict:
                print '  -> WARNING: Wrong label for assessor'
            else:
                #check if subject/experiment exists on XNAT
                session_obj = xnat.select('/project/'+proc_dict['project']+'/subjects/'+proc_dict['subject']+'/experiments/'+proc_dict['session'])
                if not session_obj.exists():
                    print '  -> WARNING: Wrong label for project/subject/session'
                else:        
                    ## FreeSurfer ##
                    if proc_dict['proctype']=='FS':      
                        FS_Upload(session_obj,proc_dict['label'],labels_dict[proc_dict['label']],force,delete,deleteAll)
                    ## Default Processor ##
                    else:
                        #ASSESSOR in the experiment
                        ASSESSOR,new_assessor=create_assessor(session_obj,proc_dict['label'],proc_dict['proctype'])
                        DefaultProcess_Upload(ASSESSOR,labels_dict[proc_dict['label']],force,delete,deleteAll,new_assessor)

########################################## CHECK OPTIONS ##########################################
def check_options(options):
    if not options.directory and not options.csv:
        print 'OPTION ERROR: please select one of this options at least: -c/--csv for csvfile or -d/--directory for upload directory.'
        return False
    if options.directory:
        if not os.path.exists(options.directory):
            print 'OPTION ERROR: given directory as argument does not exist.'
            return False
    if options.csv:
        if not os.path.exists(options.csv):
            print 'OPTION ERROR: given csv file path as argument does not exist.'
            return False
    return True

########################################## PRINT DISPLAY ##########################################
def Main_display(parser):
    (options,args)=parser.parse_args()
    #Display:
    print '################################################################'
    print '#                       XNATPROCESSUPLOAD                      #'
    print '#                                                              #'
    print '# Developed by the masiLab Vanderbilt University, TN, USA.     #'
    print '# If issues, email benjamin.c.yvernault@vanderbilt.edu         #'
    print '# Usage:                                                       #'
    print '#     Upload data (resources) for assessor on XNAT             #'
    print '# Parameters :                                                 #'
    if options=={'directory': None,'force': False,'csv': None,'delete': False,'deleteAll': False,'report': False}:
        print '#     No Arguments given                                       #'
        print '#     Use "Xnatprocessupload -h" to see the options            #'
        print '################################################################'
        parser.print_help()
        sys.exit()
    else:
        if options.directory:
            print '#     %*s -> %*s#' %(-20,'Directory',-33,get_proper_str(options.directory,True))
        if options.csv:
            print '#     %*s -> %*s#' %(-20,'CSV file',-33,get_proper_str(options.csv,True))
        if options.report:
            print '#     %*s -> %*s#' %(-20,'Report',-33,'on')
        if options.force:
            print '#     %*s -> %*s#' %(-20,'Force',-33,'on')
        if options.delete:
            print '#     %*s -> %*s#' %(-20,'Delete Resource',-33,'on')
        if options.deleteAll:
            print '#     %*s -> %*s#' %(-20,'Delete All Resources',-33,'on')
        print '################################################################'
        
def get_proper_str(str_option,end=False):
    if len(str_option)>32:
        if end:
            return '...'+str_option[-29:]
        else:
            return str_option[:29]+'...'
    else:
        return str_option

########################################## OPTIONS ##########################################
def parse_args():
    from optparse import OptionParser
    usage = "usage: %prog [options] \nWhat is the script doing : Upload Data on Xnat from a Directory as an Assessor. "
    parser = OptionParser(usage=usage)
    parser.add_option("-d", "--directory", dest="directory",default=None,
                  help="Directory containing the different assessors folders that you want to upload.", metavar="FOLDER_PATH")
    parser.add_option("-c","--csv", dest="csv", default=None,
                  help="CSV file with the information for uploading data to XNAT. Columns: assessor_label,Resource,fpath; fpath is the path for the folder or the file where the resources file(s) is(are).", metavar="PATH")
    parser.add_option("--report", dest="report",action="store_true", default=False,
                  help="Show what the script reads as data out of your directory/csv file. Use this before any upload.", metavar="")
    parser.add_option("--force", dest="force",action="store_true", default=False,
                  help="Force the upload.", metavar="")
    parser.add_option("--delete", dest="delete",action="store_true", default=False,
                  help="Delete the previous resource files before uploading the new resource files.", metavar="")
    parser.add_option("--deleteAll", dest="deleteAll",action="store_true", default=False,
                  help="Delete all the previous resources of an Assessor before uploading the new ones.", metavar="")
    return parser

###################################################################################################
########################################## MAIN FUNCTION ##########################################
###################################################################################################
if __name__ == '__main__':
    parser=parse_args()
    (options,args) = parser.parse_args()
    
    #############################
    #Main display:
    Main_display(parser)
    #check options:
    run=check_options(options)
    #############################
    
    #############################
    # RUN                       #
    #############################
    if run:
        #############################
        try:
            xnat = XnatUtils.get_interface()
            #Upload data:
            upload_assessor_xnat(xnat,options.directory,options.csv,options.report,options.force,options.delete,options.deleteAll)
            
        #Stop the process before the end or end of the script, remove the flagfile for the spider running 
        finally:
            xnat.disconnect()
    print '===================================================================\n'
